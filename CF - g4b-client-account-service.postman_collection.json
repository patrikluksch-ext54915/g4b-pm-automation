{
	"info": {
		"_postman_id": "5e943c03-8163-4e89-beb8-afdec1e9a757",
		"name": "CF - g4b-client-account-service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23141207"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const clients = ['zdenekKonecny','alesPokorny', 'marcelaAdamcova', 'antoninValenta', 'davidKarol', 'alexanderOravec', 'lenkaHajkova', 'lucieJiroudkova', 'pavelKrepelka', 'hanaFodorova', 'michalPribyl', 'olgaHorakova', 'zuzanaMasatova', 'tomasHerden', 'kristynaRousova', 'michaelaVikova', 'petrSpacek', 'ivanaPetrovicova', 'miroslavKupcik', 'janSuk','jiriOuborny', 'romanProchazka', 'petrBresky', 'marcelaNovotna']\r",
									"\r",
									"const auth = (cluid) => {\r",
									"    const auth = {\r",
									"        url: pm.variables.replaceIn(`{{mepTokenUrl}}?web-api-key={{mepTokenWebApiKey}}&client_id=george_for_business&cluid={{${cluid}}}&expires_in=28800&scenario_key=s_authn_sca_pwd_sms`),\r",
									"        method: 'GET'\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(auth, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        } else {\r",
									"            const jsonData = response.json();\r",
									"            pm.collectionVariables.set(`${cluid}Token`, jsonData.access_token);\r",
									"        }\r",
									"    });\r",
									"};\r",
									"\r",
									"clients.forEach(cluid => auth(cluid))\r",
									"\r",
									"const authInvalidAudience = (cluid) => {\r",
									"    const auth = {\r",
									"        url: pm.variables.replaceIn(`{{mepTokenUrl}}?web-api-key={{mepTokenWebApiKey}}&client_id=george_ticketing_client&cluid=${cluid}&expires_in=28800&scenario_key=s_authn_sca_pwd_sms`),\r",
									"        method: 'GET'\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(auth, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        } else {\r",
									"            const jsonData = response.json();\r",
									"            pm.collectionVariables.set(`InvalidAudienceToken`, jsonData.access_token);\r",
									"        }\r",
									"    });\r",
									"};\r",
									"\r",
									"authInvalidAudience('1997-04-10-22.11.11.258187')\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mepTokenUrl}}?web-api-key={{mepTokenWebApiKey}}&client_id=george_for_business&cluid={{lenkaHajkova}}&expires_in=3600&scenario_key=s_authn_sca_pwd_sms",
							"host": [
								"{{mepTokenUrl}}"
							],
							"query": [
								{
									"key": "web-api-key",
									"value": "{{mepTokenWebApiKey}}"
								},
								{
									"key": "client_id",
									"value": "george_for_business"
								},
								{
									"key": "cluid",
									"value": "{{lenkaHajkova}}"
								},
								{
									"key": "expires_in",
									"value": "3600"
								},
								{
									"key": "scenario_key",
									"value": "s_authn_sca_pwd_sms"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//Error tests",
							"const keyMissingTests = () => {",
							"    const response = pm.response.json();",
							"",
							"    pm.test('Status code is 401', () => {",
							"        pm.response.to.have.status(401);",
							"    });",
							"",
							"    pm.test('Response contains status and errors array', () => {",
							"        //pm.expect(response.status).to.eql(401);",
							"        pm.expect(response.errors).to.be.an('array');",
							"        pm.expect(response.errors[0]).to.be.an('object');",
							"    });",
							"",
							"    pm.test('Response contains error message: KEY_MISSING', () => {",
							"        pm.expect(response.errors).to.have.lengthOf(1);",
							"        pm.expect(response.errors[0].error).to.eql('KEY_MISSING');",
							"    });",
							"};",
							"",
							"const tokenMissingTests = () => {",
							"    const response = pm.response.json();",
							"",
							"    pm.test('Status code is 401', () => {",
							"        pm.response.to.have.status(401);",
							"    });",
							"",
							"    pm.test('Response contains status and errors array', () => {",
							"        //pm.expect(response.status).to.eql(401);",
							"        pm.expect(response.errors).to.be.an('array');",
							"        pm.expect(response.errors[0]).to.be.an('object');",
							"    });",
							"",
							"    pm.test('Response contains error message: TOKEN_INVALID and Bearer error=\"token_missing\"', () => {",
							"        pm.expect(response.errors).to.have.lengthOf(1);",
							"        pm.expect(response.errors[0].error).to.eql('TOKEN_INVALID');",
							"        pm.expect(pm.response.headers.get('WWW-Authenticate')).to.eql('Bearer error=\"token_missing\"');",
							"    });",
							"};",
							"",
							"const tokenInvalidTests = () => {",
							"    const response = pm.response.json();",
							"",
							"    pm.test('Status code is 401', () => {",
							"        pm.response.to.have.status(401);",
							"    });",
							"",
							"    pm.test('Response contains errors array', () => {",
							"        //pm.expect(response.status).to.eql(401);",
							"        pm.expect(response.errors).to.be.an('array');",
							"        pm.expect(response.errors[0]).to.be.an('object');",
							"    });",
							"",
							"    pm.test('Response contains error message: TOKEN_INVALID and Bearer error=\"invalid_token', () => {",
							"        pm.expect(response.errors).to.have.lengthOf(1);",
							"        pm.expect(response.errors[0].error).to.eql('TOKEN_INVALID');",
							"        pm.expect(pm.response.headers.get('WWW-Authenticate')).to.eql('Bearer error=\"invalid_token\"');",
							"    });",
							"};",
							"",
							"const tokenInvalidAudienceTests = () => {",
							"    const response = pm.response.json();",
							"",
							"    pm.test('Status code is 401', () => {",
							"        pm.response.to.have.status(401);",
							"    });",
							"",
							"    pm.test('Response contains errors array', () => {",
							"        pm.expect(response.errors).to.be.an('array');",
							"        pm.expect(response.errors[0]).to.be.an('object');",
							"    });",
							"",
							"    pm.test('Response contains error message: TOKEN_INVALID and Audience error=\"invalid_audience\"', () => {",
							"        pm.expect(response.errors).to.have.lengthOf(1);",
							"        pm.expect(response.errors[0].error).to.eql('TOKEN_INVALID');",
							"        pm.expect(pm.response.headers.get('WWW-Authenticate')).to.eql('Audience error=\"invalid_audience\"');",
							"    });",
							"};",
							"",
							"pm.collectionVariables.set('keyMissingTests', keyMissingTests.toString());",
							"pm.collectionVariables.set('tokenMissingTests', tokenMissingTests.toString());",
							"pm.collectionVariables.set('tokenInvalidTests', tokenInvalidTests.toString());",
							"pm.collectionVariables.set('tokenInvalidAudienceTests', tokenInvalidAudienceTests.toString());",
							"pm.collectionVariables.set('invalidToken', '3/7nz8H096eb8Gf014OD85brFae1OpIBoGnMbDmwGhO8PYAzTtaoiN864QCnbRbxXm');",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GET /my/accounts",
			"item": [
				{
					"name": "positive",
					"item": [
						{
							"name": "params",
							"item": [
								{
									"name": "without params",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{lucieJiroudkovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.pageNumber).to.eql(0);\r",
													"    pm.expect(response.pageCount).to.eql(1);\r",
													"    pm.expect(response.pageSize).to.eql(1);\r",
													"    pm.expect(response.pageSize).to.eql(response.accounts.length);\r",
													"    pm.expect(response).to.not.have.property('nextPage');\r",
													"    pm.expect(response.accounts[0].id).to.eql('2AE54048004F1F7376CC5946DAF022DBD5D002AF');\r",
													"    pm.expect(response.accounts[0].accountno.iban).to.eql('CZ9508000000000004433452');\r",
													"    pm.expect(response.accounts[0].accountno.bic).to.eql('GIBACZPX');\r",
													"    pm.expect(response.accounts[0].type).to.eql('CURRENT');\r",
													"    pm.expect(response.accounts[0].subtype).to.eql('CURRENT_SYM');\r",
													"    pm.expect(response.accounts[0].product).to.eql('6');\r",
													"    pm.expect(response.accounts[0].productI18N).to.eql('Běžný účet');\r",
													"    pm.expect(response.accounts[0].description).to.eql('FCE Credit, s.r.o.');\r",
													"    pm.expect(response.accounts[0].balance.value).to.eql(630536);\r",
													"    pm.expect(response.accounts[0].balance.precision).to.eql(2);\r",
													"    pm.expect(response.accounts[0].balance.currency).to.eql('CZK');\r",
													"    pm.expect(response.accounts[0].alias).to.eql(\"\");\r",
													"    pm.expect(response.accounts[0].disposable.value).to.eql(630536);\r",
													"    pm.expect(response.accounts[0].disposable.precision).to.eql(2);\r",
													"    pm.expect(response.accounts[0].disposable.currency).to.eql('CZK');\r",
													"    pm.expect(response.accounts[0].flags).to.have.lengthOf(2);\r",
													"    pm.expect(response.accounts[0].flags).to.include.members(['accountQueryAllowed', 'internationalTransferAllowed']);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "without params CD-44444 cosign",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer 3/TCEP2W6EPc5kho5KY87Hw7LoauXLR1520nFgMdlcVPWONWbC5uIxWuXJV0TsjYPq' });\r",
													"\r",
													"//1997-04-09-17.08.12.006907\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.pageNumber).to.eql(0);\r",
													"    pm.expect(response.pageCount).to.eql(1);\r",
													"    pm.expect(response.pageSize).to.eql(1);\r",
													"    pm.expect(response.pageSize).to.eql(response.accounts.length);\r",
													"    pm.expect(response).to.not.have.property('nextPage');\r",
													"    pm.expect(response.accounts[0].id).to.eql('2AE54048004F1F7376CC5946DAF022DBD5D002AF');\r",
													"    pm.expect(response.accounts[0].accountno.iban).to.eql('CZ9508000000000004433452');\r",
													"    pm.expect(response.accounts[0].accountno.bic).to.eql('GIBACZPX');\r",
													"    pm.expect(response.accounts[0].type).to.eql('CURRENT');\r",
													"    pm.expect(response.accounts[0].subtype).to.eql('CURRENT_SYM');\r",
													"    pm.expect(response.accounts[0].product).to.eql('6');\r",
													"    pm.expect(response.accounts[0].productI18N).to.eql('Běžný účet');\r",
													"    pm.expect(response.accounts[0].description).to.eql('FCE Credit, s.r.o.');\r",
													"    pm.expect(response.accounts[0].balance.value).to.eql(630536);\r",
													"    pm.expect(response.accounts[0].balance.precision).to.eql(2);\r",
													"    pm.expect(response.accounts[0].balance.currency).to.eql('CZK');\r",
													"    pm.expect(response.accounts[0].alias).to.eql(\"\");\r",
													"    pm.expect(response.accounts[0].disposable.value).to.eql(630536);\r",
													"    pm.expect(response.accounts[0].disposable.precision).to.eql(2);\r",
													"    pm.expect(response.accounts[0].disposable.currency).to.eql('CZK');\r",
													"    pm.expect(response.accounts[0].flags).to.have.lengthOf(2);\r",
													"    pm.expect(response.accounts[0].flags).to.include.members(['accountQueryAllowed', 'internationalTransferAllowed']);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "without params CD-44444 sign",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer 3/Elzt7mO8mQKTlJW8wTUyo06gQ3m1Xctuh12v3ofxqSmymKwpIoKvbqjccR7vmJuj' });\r",
													"\r",
													"//1997-04-09-17.08.12.006907\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.pageNumber).to.eql(0);\r",
													"    pm.expect(response.pageCount).to.eql(1);\r",
													"    pm.expect(response.pageSize).to.eql(1);\r",
													"    pm.expect(response.pageSize).to.eql(response.accounts.length);\r",
													"    pm.expect(response).to.not.have.property('nextPage');\r",
													"    pm.expect(response.accounts[0].id).to.eql('2AE54048004F1F7376CC5946DAF022DBD5D002AF');\r",
													"    pm.expect(response.accounts[0].accountno.iban).to.eql('CZ9508000000000004433452');\r",
													"    pm.expect(response.accounts[0].accountno.bic).to.eql('GIBACZPX');\r",
													"    pm.expect(response.accounts[0].type).to.eql('CURRENT');\r",
													"    pm.expect(response.accounts[0].subtype).to.eql('CURRENT_SYM');\r",
													"    pm.expect(response.accounts[0].product).to.eql('6');\r",
													"    pm.expect(response.accounts[0].productI18N).to.eql('Běžný účet');\r",
													"    pm.expect(response.accounts[0].description).to.eql('FCE Credit, s.r.o.');\r",
													"    pm.expect(response.accounts[0].balance.value).to.eql(630536);\r",
													"    pm.expect(response.accounts[0].balance.precision).to.eql(2);\r",
													"    pm.expect(response.accounts[0].balance.currency).to.eql('CZK');\r",
													"    pm.expect(response.accounts[0].alias).to.eql(\"\");\r",
													"    pm.expect(response.accounts[0].disposable.value).to.eql(630536);\r",
													"    pm.expect(response.accounts[0].disposable.precision).to.eql(2);\r",
													"    pm.expect(response.accounts[0].disposable.currency).to.eql('CZK');\r",
													"    pm.expect(response.accounts[0].flags).to.have.lengthOf(2);\r",
													"    pm.expect(response.accounts[0].flags).to.include.members(['accountQueryAllowed', 'internationalTransferAllowed']);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "with size",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const size = Number(pm.request.url.query.get('size'));\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.pageNumber).to.eql(0);\r",
													"    pm.expect(response.pageCount).to.eql(5);\r",
													"    pm.expect(response.nextPage).to.eql(1);\r",
													"    pm.expect(response.pageSize).to.eql(size);\r",
													"    pm.expect(response.accounts.length).to.eql(size);\r",
													"    pm.expect(response.accounts).not.to.be.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts?size=2",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "size",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with size, page",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const size = Number(pm.request.url.query.get('size'));\r",
													"let page = Number(pm.request.url.query.get('page'));\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.pageNumber).to.eql(page);\r",
													"    pm.expect(response.pageCount).to.be.eql(10);\r",
													"    pm.expect(response.pageSize).to.eql(size);\r",
													"    pm.expect(response.nextPage).to.eql(++page);\r",
													"    pm.expect(response.accounts.length).to.eql(size);\r",
													"    pm.expect(response.accounts).not.to.be.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts?size=1&page=3",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "size",
													"value": "1"
												},
												{
													"key": "page",
													"value": "3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with size, page Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{lucieJiroudkovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const size = Number(pm.request.url.query.get('size'));\r",
													"let page = Number(pm.request.url.query.get('page'));\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.pageNumber).to.eql(page);\r",
													"    pm.expect(response.pageCount).to.be.eql(10);\r",
													"    pm.expect(response.pageSize).to.eql(size);\r",
													"    pm.expect(response.nextPage).to.eql(++page);\r",
													"    pm.expect(response.accounts.length).to.eql(size);\r",
													"    pm.expect(response.accounts).not.to.be.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts?size=1&page=3",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "size",
													"value": "1"
												},
												{
													"key": "page",
													"value": "3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "without sort",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{zuzanaMasatovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.accounts[0].description).to.eql('Influente Agency, a.s.');\r",
													"    pm.expect(response.accounts[6].description).to.eql('Witty s.r.o.');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "sort",
													"value": "balance",
													"description": "default sort by description order asc",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "without sort Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{lucieJiroudkovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.accounts[0].description).to.eql('Influente Agency, a.s.');\r",
													"    pm.expect(response.accounts[6].description).to.eql('Witty s.r.o.');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "sort",
													"value": "balance",
													"description": "default sort by description order asc",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "sort description desc",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{zuzanaMasatovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.accounts[0].description).to.eql('Witty s.r.o.');\r",
													"    pm.expect(response.accounts[6].description).to.eql('Influente Agency, a.s.');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts?sort=description&order=desc",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "sort",
													"value": "description"
												},
												{
													"key": "order",
													"value": "desc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "sort balance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{zuzanaMasatovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.accounts[1].balance.value).to.be.lte(response.accounts[2].balance.value);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts?sort=balance",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "sort",
													"value": "balance",
													"description": "default order asc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "sort balance desc",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{zuzanaMasatovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.accounts[0].balance.value).to.be.gte(response.accounts[1].balance.value);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts?sort=balance&order=desc",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "sort",
													"value": "balance"
												},
												{
													"key": "order",
													"value": "desc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "sort disposable asc",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{zuzanaMasatovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.accounts[3].disposable.value).to.be.lte(response.accounts[4].disposable.value);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts?sort=disposable&order=asc",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "sort",
													"value": "disposable"
												},
												{
													"key": "order",
													"value": "asc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "sort disposable desc",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{zuzanaMasatovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.accounts[1].disposable.value).to.be.gte(response.accounts[2].disposable.value);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts?sort=disposable&order=desc",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "sort",
													"value": "disposable"
												},
												{
													"key": "order",
													"value": "desc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "sort iban",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{zuzanaMasatovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.accounts[0].accountno.iban).to.eql('CZ0808000000000009098972');\r",
													"    pm.expect(response.accounts[1].accountno.iban).to.eql('CZ2708000000000009074962');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts?sort=iban",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "sort",
													"value": "iban",
													"description": "default order asc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "sort description,balance desc",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.accounts[0].id).to.eql('309C2326A3A6C48B2A9472D507648D4D0A0C5F27');\r",
													"    pm.expect(response.accounts[1].id).to.eql('9021528F53A48EE96CC8A72FC124661ADADF20C5');\r",
													"    pm.expect(response.accounts[2].id).to.eql('3074A176859F65060FE85549E40FDE62834361FF');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts?sort=description,balance&order=asc,desc",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "sort",
													"value": "description,balance"
												},
												{
													"key": "order",
													"value": "asc,desc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{olgaHorakovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.accounts).to.have.lengthOf(1);\r",
													"    pm.expect(response.accounts[0].type).to.eql('CURRENT');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts?type=CURRENT",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "type",
													"value": "CURRENT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with type comma separated",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{olgaHorakovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.accounts).to.have.lengthOf(2);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts?type=CURRENT&type=SAVING",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "type",
													"value": "CURRENT"
												},
												{
													"key": "type",
													"value": "SAVING"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with all params",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{zuzanaMasatovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const size = Number(pm.request.url.query.get('size'));\r",
													"let page = Number(pm.request.url.query.get('page'));\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.pageNumber).to.eql(page);\r",
													"    pm.expect(response.pageSize).to.eql(size);\r",
													"    pm.expect(response.nextPage).to.eql(++page);\r",
													"    pm.expect(response.accounts.length).to.eql(size);\r",
													"    pm.expect(response.accounts).not.to.be.empty;\r",
													"    pm.expect(response.accounts[0].description).to.eql('Witty s.r.o.');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts?size=1&page=0&sort=description&order=desc&type=CURRENT",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											],
											"query": [
												{
													"key": "size",
													"value": "1"
												},
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "sort",
													"value": "description"
												},
												{
													"key": "order",
													"value": "desc"
												},
												{
													"key": "type",
													"value": "CURRENT"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "client with current account passive=true and active=false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{lucieJiroudkovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains account', () => {\r",
											"    pm.expect(response.accounts).to.be.an('array');\r",
											"    pm.expect(response.accounts).to.have.lengthOf(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "client with current account passive=false and active=true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{hanaFodorovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains account', () => {\r",
											"    pm.expect(response.accounts).to.be.an('array');\r",
											"    pm.expect(response.accounts).to.have.lengthOf(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "client with current account passive=true and active=true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{michalPribylToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains account', () => {\r",
											"    pm.expect(response.accounts).to.be.an('array');\r",
											"    pm.expect(response.accounts).to.have.lengthOf(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "client with saving account passive=true or active=true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{olgaHorakovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains account', () => {\r",
											"    pm.expect(response.accounts).to.be.an('array');\r",
											"    pm.expect(response.accounts).to.have.lengthOf(2);\r",
											"    pm.expect(response.accounts[0].type).to.eql('SAVING');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD-33232 will be",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains accounts.saving.nextProlongation CD-33232', () => {\r",
											"    pm.expect(response.accounts[0].type).to.eql('SAVING');\r",
											"    pm.expect(response.accounts[0].saving).to.be.an('array');\r",
											"    pm.expect(response.accounts[0].saving.nextProlongation).to.eql('YYYY-MM-DD'); //konkrétní datum samozřejmě :-D\r",
											"    pm.expect(moment(response.accounts[0].saving.nextProlongation, 'YYYY-MM-DD', true).isValid()).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{olgaHorakovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD-35628 will be",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{olgaHorakovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Saving account response contains CD-35628', () => {\r",
											"    pm.expect(response.accounts[0].type).to.eql('SAVING');\r",
											"    pm.expect(response.accounts[0].creditInterestRate).to.be.a('number');\r",
											"    pm.expect(response.accounts[0].creditInterestRateBonus).to.be.a('number');\r",
											"    pm.expect(response.accounts[0].creditInterestRateTotal).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test('Current account response contains CD-35628', () => {\r",
											"    pm.expect(response.accounts[1].type).to.eql('CURRENT');\r",
											"    pm.expect(response.accounts[1].creditInterestRate).to.be.a('number');\r",
											"    pm.expect(response.accounts[1].creditInterestRateBonus).to.be.a('number');\r",
											"    pm.expect(response.accounts[1].creditInterestRateTotal).to.be.a('number');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "client with different accounts in dispo-replication than current or saving",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{tomasHerdenToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains empty account array', () => {\r",
											"    pm.expect(response.pageNumber).to.eql(0);\r",
											"    pm.expect(response.pageCount).to.eql(0);\r",
											"    pm.expect(response.pageSize).to.eql(response.accounts.length);\r",
											"    pm.expect(response.accounts).to.have.lengthOf(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "client without dispo record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{alesPokornyToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains empty account array', () => {\r",
											"    pm.expect(response.pageNumber).to.eql(0);\r",
											"    pm.expect(response.pageCount).to.eql(0);\r",
											"    pm.expect(response.pageSize).to.eql(response.accounts.length);\r",
											"    pm.expect(response.accounts).to.have.lengthOf(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "client with current account passive=false and active=false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{pavelKrepelkaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains empty account array', () => {\r",
											"    pm.expect(response.pageNumber).to.eql(0);\r",
											"    pm.expect(response.pageCount).to.eql(0);\r",
											"    pm.expect(response.pageSize).to.eql(response.accounts.length);\r",
											"    pm.expect(response.accounts).to.have.lengthOf(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "cs language",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{lucieJiroudkovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.accounts[0].productI18N).to.eql('Běžný účet');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Client-Accept-Language",
										"value": "cs",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "en language",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{lucieJiroudkovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.accounts[0].productI18N).to.eql('Current Account');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Client-Accept-Language",
										"value": "en",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate schema",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"required\": [\r",
											"        \"pageNumber\",\r",
											"        \"pageCount\",\r",
											"        \"pageSize\",\r",
											"        \"accounts\",\r",
											"        \"nextPage\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"pageNumber\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"pageCount\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"pageSize\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"accounts\": {\r",
											"            \"type\": \"array\",\r",
											"            \"uniqueItems\": true,\r",
											"            \"additionalItems\": false,\r",
											"            \"items\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"id\",\r",
											"                    \"accountno\",\r",
											"                    \"type\",\r",
											"                    \"subtype\",\r",
											"                    \"product\",\r",
											"                    \"productI18N\",\r",
											"                    \"description\",\r",
											"                    \"balance\",\r",
											"                    \"alias\",\r",
											"                    \"disposable\",\r",
											"                    \"flags\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"id\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"accountno\": {\r",
											"                        \"type\": \"object\",\r",
											"                        \"required\": [\r",
											"                            \"iban\",\r",
											"                            \"bic\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"iban\": {\r",
											"                                \"type\": \"string\"\r",
											"                            },\r",
											"                            \"bic\": {\r",
											"                                \"type\": \"string\"\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": false\r",
											"                    },\r",
											"                    \"type\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"subtype\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"product\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"productI18N\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"description\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"balance\": {\r",
											"                        \"type\": \"object\",\r",
											"                        \"required\": [\r",
											"                            \"value\",\r",
											"                            \"precision\",\r",
											"                            \"currency\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"value\": {\r",
											"                                \"type\": \"integer\"\r",
											"                            },\r",
											"                            \"precision\": {\r",
											"                                \"type\": \"integer\"\r",
											"                            },\r",
											"                            \"currency\": {\r",
											"                                \"type\": \"string\"\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": false\r",
											"                    },\r",
											"                    \"alias\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"disposable\": {\r",
											"                        \"type\": \"object\",\r",
											"                        \"required\": [\r",
											"                            \"value\",\r",
											"                            \"precision\",\r",
											"                            \"currency\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"value\": {\r",
											"                                \"type\": \"integer\"\r",
											"                            },\r",
											"                            \"precision\": {\r",
											"                                \"type\": \"integer\"\r",
											"                            },\r",
											"                            \"currency\": {\r",
											"                                \"type\": \"string\"\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": false\r",
											"                    },\r",
											"                    \"flags\": {\r",
											"                        \"type\": \"array\",\r",
											"                        \"minItems\": 2,\r",
											"                        \"maxItems\": 2,\r",
											"                        \"uniqueItems\": true,\r",
											"                        \"additionalItems\": false,\r",
											"                        \"items\": {\r",
											"                            \"type\": \"string\"\r",
											"                        }\r",
											"                    }\r",
											"                },\r",
											"                \"additionalProperties\": false\r",
											"            }\r",
											"        },\r",
											"        \"nextPage\": {\r",
											"            \"type\": \"integer\"\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts?size=1&page=2",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts"
									],
									"query": [
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client with 400+ accounts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{kristynaRousovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains empty account array', () => {\r",
											"    pm.expect(response.pageSize).to.eql(response.accounts.length);\r",
											"    pm.expect(response.accounts.length).to.be.above(400)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "negative",
					"item": [
						{
							"name": "auth",
							"item": [
								{
									"name": "401 subscription key missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token invalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token invalid audience",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: '{{InvalidAudienceToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenInvalidAudienceTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "GET /my/accounts/{id}",
			"item": [
				{
					"name": "positive",
					"item": [
						{
							"name": "account id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getAccounts = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{lucieJiroudkovaToken}}')\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getAccounts, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const accountObj = jsonData.accounts[0];\r",
											"            pm.variables.set('accountObj', accountObj);\r",
											"            pm.variables.set('id', accountObj.id);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{lucieJiroudkovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains account object', () => {\r",
											"    pm.expect(response).to.eql(pm.variables.get('accountObj'));\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.id).to.eql('2AE54048004F1F7376CC5946DAF022DBD5D002AF');\r",
											"    pm.expect(response.accountno.iban).to.eql('CZ9508000000000004433452');\r",
											"    pm.expect(response.accountno.bic).to.eql('GIBACZPX');\r",
											"    pm.expect(response.type).to.eql('CURRENT');\r",
											"    pm.expect(response.subtype).to.eql('CURRENT_SYM');\r",
											"    pm.expect(response.product).to.eql('6');\r",
											"    pm.expect(response.productI18N).to.eql('Běžný účet');\r",
											"    pm.expect(response.description).to.eql('FCE Credit, s.r.o.');\r",
											"    pm.expect(response.balance.value).to.eql(20749111);\r",
											"    pm.expect(response.balance.precision).to.eql(2);\r",
											"    pm.expect(response.balance.currency).to.eql('CZK');\r",
											"    pm.expect(response.alias).to.eql(\"\");\r",
											"    pm.expect(response.disposable.value).to.eql(20749111);\r",
											"    pm.expect(response.disposable.precision).to.eql(2);\r",
											"    pm.expect(response.disposable.currency).to.eql('CZK');\r",
											"    pm.expect(response.flags).to.have.lengthOf(2);\r",
											"    pm.expect(response.flags).to.include.members(['accountQueryAllowed', 'internationalTransferAllowed']);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD-40741 account id - lenkaHajkova",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const id = '08F593123DD2AD5847D7137EF1502F196457C121';\r",
											"\r",
											"pm.variables.set('id', id);\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{olgaHorakovaToken}}' });  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains account object', () => {\r",
											"    pm.expect(response).to.eql(pm.variables.get('accountObj'));\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.id).to.eql('2AE54048004F1F7376CC5946DAF022DBD5D002AF');\r",
											"    pm.expect(response.accountno.iban).to.eql('CZ9508000000000004433452');\r",
											"    pm.expect(response.accountno.bic).to.eql('GIBACZPX');\r",
											"    pm.expect(response.type).to.eql('CURRENT');\r",
											"    pm.expect(response.subtype).to.eql('CURRENT_SYM');\r",
											"    pm.expect(response.product).to.eql('6');\r",
											"    pm.expect(response.productI18N).to.eql('Běžný účet');\r",
											"    pm.expect(response.description).to.eql('FCE Credit, s.r.o.');\r",
											"    pm.expect(response.balance.value).to.eql(20749111);\r",
											"    pm.expect(response.balance.precision).to.eql(2);\r",
											"    pm.expect(response.balance.currency).to.eql('CZK');\r",
											"    pm.expect(response.alias).to.eql(\"\");\r",
											"    pm.expect(response.disposable.value).to.eql(20749111);\r",
											"    pm.expect(response.disposable.precision).to.eql(2);\r",
											"    pm.expect(response.disposable.currency).to.eql('CZK');\r",
											"    pm.expect(response.flags).to.have.lengthOf(2);\r",
											"    pm.expect(response.flags).to.include.members(['accountQueryAllowed', 'internationalTransferAllowed']);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD-33232",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const id = '1412DEE7DCD9617DA778F2B7CDD9F6D4C94317F2';\r",
											"pm.variables.set('id', id);\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{olgaHorakovaToken}}' });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains accounts.saving.nextProlongation CD-33232', () => {\r",
											"    pm.expect(response.accounts[0].type).to.eql('SAVING');\r",
											"    pm.expect(response.accounts[0].saving).to.be.an('array');\r",
											"    pm.expect(response.accounts[0].saving.nextProlongation).to.eql('YYYY-MM-DD'); //konkrétní datum samozřejmě :-D\r",
											"    pm.expect(moment(response.accounts[0].saving.nextProlongation, 'YYYY-MM-DD', true).isValid()).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD-35628 saving",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const id = '1412DEE7DCD9617DA778F2B7CDD9F6D4C94317F2';\r",
											"pm.variables.set('id', id);\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{olgaHorakovaToken}}' });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Saving account response contains CD-35628', () => {\r",
											"    pm.expect(response.accounts[0].type).to.eql('SAVING');\r",
											"    pm.expect(response.accounts[0].creditInterestRate).to.be.a('number');\r",
											"    pm.expect(response.accounts[0].creditInterestRateBonus).to.be.a('number');\r",
											"    pm.expect(response.accounts[0].creditInterestRateTotal).to.be.a('number');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD-35628 current",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const id = '9EFBBEE4A151B0A231270C6EA58FE9AB14B00F0A';\r",
											"pm.variables.set('id', id);\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{olgaHorakovaToken}}' });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Current account response contains CD-35628', () => {\r",
											"    pm.expect(response.accounts[0].type).to.eql('CURRENT');\r",
											"    pm.expect(response.accounts[0].creditInterestRate).to.be.a('number');\r",
											"    pm.expect(response.accounts[0].creditInterestRateBonus).to.be.a('number');\r",
											"    pm.expect(response.accounts[0].creditInterestRateTotal).to.be.a('number');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "account id - client with 400+ accounts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getAccounts = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{kristynaRousovaToken}}')\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getAccounts, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const accountObj = jsonData.accounts[0];\r",
											"            pm.variables.set('accountObj', accountObj);\r",
											"            pm.variables.set('id', accountObj.id);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{kristynaRousovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains account object', () => {\r",
											"    pm.expect(response).to.eql(pm.variables.get('accountObj'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "negative",
					"item": [
						{
							"name": "auth",
							"item": [
								{
									"name": "401 subscription key missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const getAccounts = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{lucieJiroudkovaToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getAccounts, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        // const jsonData = response.json();\r",
													"        // const accountObj = jsonData.accounts[0];\r",
													"        // pm.variables.set('accountObj', accountObj);\r",
													"        // pm.variables.set('id', accountObj.id);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/{{id}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const getAccounts = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{lucieJiroudkovaToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getAccounts, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        // const jsonData = response.json();\r",
													"        // const accountObj = jsonData.accounts[0];\r",
													"        // pm.variables.set('accountObj', accountObj);\r",
													"        // pm.variables.set('id', accountObj.id);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/{{id}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token invalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const getAccounts = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{lucieJiroudkovaToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getAccounts, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        // const jsonData = response.json();\r",
													"        // const accountObj = jsonData.accounts[0];\r",
													"        // pm.variables.set('accountObj', accountObj);\r",
													"        // pm.variables.set('id', accountObj.id);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/{{id}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token invalid audience",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const getAccounts = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{lucieJiroudkovaToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getAccounts, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        // const jsonData = response.json();\r",
													"        // const accountObj = jsonData.accounts[0];\r",
													"        // pm.variables.set('accountObj', accountObj);\r",
													"        // pm.variables.set('id', accountObj.id);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: '{{InvalidAudienceToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenInvalidAudienceTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/{{id}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"{{id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "invalid id path",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 403', () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test('Response contains uuid and errors array', () => {\r",
											"    pm.expect(response.uuid).to.be.a('string');\r",
											"    pm.expect(response.errors).to.be.an('array');\r",
											"    pm.expect(response.errors[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: DISALLOWED_ENDPOINT', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('DISALLOWED_ENDPOINT');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/2AE54048004F1F7376CC5946DCF022DBD5D002AG",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"2AE54048004F1F7376CC5946DCF022DBD5D002AG"
									]
								}
							},
							"response": []
						},
						{
							"name": "current account without account:view permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// current account without account:view permission\r",
											"const id = '60735F64B4B6A22EF2D8366928FC451F8E8DEB85';\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{tomasHerdenToken}}' });\r",
											"pm.variables.set('id', id);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 403', () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test('Response contains uuid and errors array', () => {\r",
											"    pm.expect(response.uuid).to.be.a('string');\r",
											"    pm.expect(response.errors).to.be.an('array');\r",
											"    pm.expect(response.errors[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: DISALLOWED_ENDPOINT', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('DISALLOWED_ENDPOINT');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "loan account with account:view permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// loan account with account:view permission\r",
											"const id = '3F8C5CDB0003BAB8122F93E9480F4C24901736D2';\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{tomasHerdenToken}}' });\r",
											"pm.variables.set('id', id);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('Response contains uuid and errors array', () => {\r",
											"    pm.expect(response.uuid).to.be.a('string');\r",
											"    pm.expect(response.errors).to.be.an('array');\r",
											"    pm.expect(response.errors[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: UNKNOWN_PRODUCT', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('UNKNOWN_PRODUCT');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD-40741 loan account 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const id = '08F593123DD2AD5847D7137EF1502F196457C121';\r",
											"\r",
											"pm.variables.set('id', id);\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{olgaHorakovaToken}}' });  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains account object', () => {\r",
											"    pm.expect(response).to.eql(pm.variables.get('accountObj'));\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.id).to.eql('2AE54048004F1F7376CC5946DAF022DBD5D002AF');\r",
											"    pm.expect(response.accountno.iban).to.eql('CZ9508000000000004433452');\r",
											"    pm.expect(response.accountno.bic).to.eql('GIBACZPX');\r",
											"    pm.expect(response.type).to.eql('CURRENT');\r",
											"    pm.expect(response.subtype).to.eql('CURRENT_SYM');\r",
											"    pm.expect(response.product).to.eql('6');\r",
											"    pm.expect(response.productI18N).to.eql('Běžný účet');\r",
											"    pm.expect(response.description).to.eql('FCE Credit, s.r.o.');\r",
											"    pm.expect(response.balance.value).to.eql(20749111);\r",
											"    pm.expect(response.balance.precision).to.eql(2);\r",
											"    pm.expect(response.balance.currency).to.eql('CZK');\r",
											"    pm.expect(response.alias).to.eql(\"\");\r",
											"    pm.expect(response.disposable.value).to.eql(20749111);\r",
											"    pm.expect(response.disposable.precision).to.eql(2);\r",
											"    pm.expect(response.disposable.currency).to.eql('CZK');\r",
											"    pm.expect(response.flags).to.have.lengthOf(2);\r",
											"    pm.expect(response.flags).to.include.members(['accountQueryAllowed', 'internationalTransferAllowed']);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "PUT /my/accounts/{id}",
			"item": [
				{
					"name": "positive",
					"item": [
						{
							"name": "put alias",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomAlias = `${pm.variables.replaceIn('{{$randomBankAccountName}}')} ${pm.variables.replaceIn('{{$randomBankAccount}}')}`;\r",
											"const getAccounts = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{olgaHorakovaToken}}'),\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}')\r",
											"    }\r",
											"};\r",
											"pm.variables.set('getAccounts', getAccounts);\r",
											"\r",
											"pm.sendRequest(getAccounts, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const accountObj = jsonData.accounts[0];\r",
											"            pm.variables.set('accountObj', accountObj);\r",
											"            pm.variables.set('id', accountObj.id);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{olgaHorakovaToken}}' });\r",
											"pm.variables.set('alias', randomAlias);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const accountObj = pm.variables.get('accountObj');\r",
											"const alias = pm.variables.get('alias');\r",
											"const getAccounts = pm.variables.get('getAccounts');\r",
											"const getAccountByAccountId = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts/{{id}}'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{olgaHorakovaToken}}')\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.test('Status code is 201', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.id).to.eql(accountObj.id);\r",
											"    pm.expect(response.accountno.iban).to.eql(accountObj.accountno.iban);\r",
											"    pm.expect(response.accountno.bic).to.eql(accountObj.accountno.bic);\r",
											"    pm.expect(response.type).to.eql(accountObj.type);\r",
											"    pm.expect(response.subtype).to.eql(accountObj.subtype);\r",
											"    pm.expect(response.product).to.eql(accountObj.product);\r",
											"    pm.expect(response.productI18N).to.eql(accountObj.productI18N);\r",
											"    pm.expect(response.description).to.eql(accountObj.description);\r",
											"    pm.expect(response.balance.value).to.eql(accountObj.balance.value);\r",
											"    pm.expect(response.balance.precision).to.eql(accountObj.balance.precision);\r",
											"    pm.expect(response.balance.currency).to.eql(accountObj.balance.currency);\r",
											"    pm.expect(response.signInfo.state).to.eql('NONE');\r",
											"    pm.expect(response.alias).to.eql(alias);\r",
											"    pm.expect(response.disposable.value).to.eql(accountObj.disposable.value);\r",
											"    pm.expect(response.disposable.precision).to.eql(accountObj.disposable.precision);\r",
											"    pm.expect(response.disposable.currency).to.eql(accountObj.disposable.currency);\r",
											"    pm.expect(response.flags).to.eql(accountObj.flags);\r",
											"});\r",
											"\r",
											"pm.test('Get /my/accounts contains new alias', () => {\r",
											"    pm.sendRequest(getAccounts, (error, response) => {\r",
											"        const jsonData = response.json();\r",
											"        const account = jsonData.accounts.find(account => account.id === pm.variables.get('id'));\r",
											"        pm.expect(error).to.not.be.ok;\r",
											"        pm.expect(response.code).to.equal(200);\r",
											"        pm.expect(account.alias).to.eql(alias);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Get /my/accounts/{id} contains new alias', () => {\r",
											"    pm.sendRequest(getAccountByAccountId, (error, response) => {\r",
											"        const jsonData = response.json();\r",
											"        pm.expect(error).to.not.be.ok;\r",
											"        pm.expect(response.code).to.equal(200);\r",
											"        pm.expect(jsonData.alias).to.eql(alias);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"alias\": \"{{alias}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "put alias - client with 400+ accounts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomAlias = `${pm.variables.replaceIn('{{$randomBankAccountName}}')} ${pm.variables.replaceIn('{{$randomBankAccount}}')}`;\r",
											"const getAccounts = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{olgaHorakovaToken}}'),\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}')\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getAccounts, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const accountObj = jsonData.accounts[0];\r",
											"            pm.variables.set('id', accountObj.id);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{olgaHorakovaToken}}' });\r",
											"pm.variables.set('alias', randomAlias);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 201', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Response contains new alias', () => {\r",
											"    pm.expect(response.alias).to.eql(pm.variables.get('alias'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"alias\": \"{{alias}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate schema",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomAlias = `${pm.variables.replaceIn('{{$randomBankAccountName}}')} ${pm.variables.replaceIn('{{$randomBankAccount}}')}`;\r",
											"const getAccounts = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{olgaHorakovaToken}}'),\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}')\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getAccounts, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const accountObj = jsonData.accounts[0];\r",
											"            pm.variables.set('id', accountObj.id);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{olgaHorakovaToken}}' });\r",
											"pm.variables.set('alias', randomAlias);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"required\": [\r",
											"        \"id\",\r",
											"        \"accountno\",\r",
											"        \"type\",\r",
											"        \"subtype\",\r",
											"        \"product\",\r",
											"        \"productI18N\",\r",
											"        \"description\",\r",
											"        \"balance\",\r",
											"        \"signInfo\",\r",
											"        \"alias\",\r",
											"        \"disposable\",\r",
											"        \"flags\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"id\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"accountno\": {\r",
											"            \"type\": \"object\",\r",
											"            \"required\": [\r",
											"                \"iban\",\r",
											"                \"bic\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"iban\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"bic\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": false\r",
											"        },\r",
											"        \"type\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"subtype\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"product\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"productI18N\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"description\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"balance\": {\r",
											"            \"type\": \"object\",\r",
											"            \"required\": [\r",
											"                \"value\",\r",
											"                \"precision\",\r",
											"                \"currency\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"value\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"precision\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"currency\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": false\r",
											"        },\r",
											"        \"signInfo\": {\r",
											"            \"type\": \"object\",\r",
											"            \"required\": [\r",
											"                \"state\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"state\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": false\r",
											"        },\r",
											"        \"alias\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"disposable\": {\r",
											"            \"type\": \"object\",\r",
											"            \"required\": [\r",
											"                \"value\",\r",
											"                \"precision\",\r",
											"                \"currency\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"value\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"precision\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"currency\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": false\r",
											"        },\r",
											"        \"flags\": {\r",
											"            \"type\": \"array\",\r",
											"            \"minItems\": 2,\r",
											"            \"maxItems\": 2,\r",
											"            \"uniqueItems\": true,\r",
											"            \"additionalItems\": false,\r",
											"            \"items\": {\r",
											"                \"type\": \"string\"\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"alias\": \"{{alias}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "negative",
					"item": [
						{
							"name": "auth",
							"item": [
								{
									"name": "401 subscription key missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomAlias = `${pm.variables.replaceIn('{{$randomBankAccountName}}')} ${pm.variables.replaceIn('{{$randomBankAccount}}')}`;\r",
													"const getAccounts = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{michaelaVikovaToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getAccounts, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            // const accountObj = jsonData.accounts[0];\r",
													"            // pm.variables.set('accountObj', accountObj);\r",
													"            // pm.variables.set('id', accountObj.id);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{michaelaVikovaToken}}' });\r",
													"pm.variables.set('alias', randomAlias);\r",
													"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"alias\": \"{{alias}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/{{id}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomAlias = `${pm.variables.replaceIn('{{$randomBankAccountName}}')} ${pm.variables.replaceIn('{{$randomBankAccount}}')}`;\r",
													"const getAccounts = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{michaelaVikovaToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getAccounts, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            // const accountObj = jsonData.accounts[0];\r",
													"            // pm.variables.set('accountObj', accountObj);\r",
													"            // pm.variables.set('id', accountObj.id);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.variables.set('alias', randomAlias);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"alias\": \"{{alias}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/{{id}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token invalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomAlias = `${pm.variables.replaceIn('{{$randomBankAccountName}}')} ${pm.variables.replaceIn('{{$randomBankAccount}}')}`;\r",
													"const getAccounts = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{michaelaVikovaToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getAccounts, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            // const accountObj = jsonData.accounts[0];\r",
													"            // pm.variables.set('accountObj', accountObj);\r",
													"            // pm.variables.set('id', accountObj.id);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('alias', randomAlias);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"alias\": \"{{alias}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/{{id}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"{{id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "id mismatch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomAlias = `${pm.variables.replaceIn('{{$randomBankAccountName}}')} ${pm.variables.replaceIn('{{$randomBankAccount}}')}`;\r",
											"const getAccounts = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}')\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getAccounts, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const accountObj = jsonData.accounts[0];\r",
											"            pm.variables.set('id', accountObj.id);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{michaelaVikovaToken}}' });\r",
											"pm.variables.set('alias', randomAlias);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response contains uuid and errors array', () => {\r",
											"    pm.expect(response.uuid).to.be.a('string');\r",
											"    pm.expect(response.errors).to.be.an('array');\r",
											"    pm.expect(response.errors[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: ID_MISMATCH', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('ID_MISMATCH');\r",
											"    pm.expect(response.errors[0].scope).to.eql('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"id\": \"C2B64534C2247CAP018E19F274E35679A8D0ECB1\",\r\n\"alias\": \"{{alias}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const invalidId = 'C2B64534C2247CAP018E19F274E35679A8D0ECB1';\r",
											"const randomAlias = `${pm.variables.replaceIn('{{$randomBankAccountName}}')} ${pm.variables.replaceIn('{{$randomBankAccount}}')}`;\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{michaelaVikovaToken}}' });\r",
											"pm.variables.set('id', invalidId);\r",
											"pm.variables.set('alias', randomAlias);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 403', () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test('Response contains uuid and errors array', () => {\r",
											"    pm.expect(response.uuid).to.be.a('string');\r",
											"    pm.expect(response.errors).to.be.an('array');\r",
											"    pm.expect(response.errors[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: DISALLOWED_ENDPOINT', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('DISALLOWED_ENDPOINT');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"alias\": \"{{alias}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "alias too long",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const longAlias = 'FIELD_TOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO_LONG';\r",
											"const getAccounts = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{michaelaVikovaToken}}')\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getAccounts, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const accountObj = jsonData.accounts[0];\r",
											"            pm.variables.set('id', accountObj.id);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{michaelaVikovaToken}}' });\r",
											"pm.variables.set('alias', longAlias);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response contains uuid and errors array', () => {\r",
											"    pm.expect(response.uuid).to.be.a('string');\r",
											"    pm.expect(response.errors).to.be.an('array');\r",
											"    pm.expect(response.errors[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: FIELD_TOO_LONG', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('FIELD_TOO_LONG');\r",
											"    pm.expect(response.errors[0].scope).to.eql('alias');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"alias\": \"{{alias}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid alias",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const invAlias = '<INVALID>';\r",
											"const getAccounts = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{michaelaVikovaToken}}')\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getAccounts, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const accountObj = jsonData.accounts[0];\r",
											"            pm.variables.set('id', accountObj.id);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{michaelaVikovaToken}}' });\r",
											"pm.variables.set('alias', invAlias);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response contains uuid and errors array', () => {\r",
											"    pm.expect(response.uuid).to.be.a('string');\r",
											"    pm.expect(response.errors).to.be.an('array');\r",
											"    pm.expect(response.errors[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: FIELD_INVALID', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('FIELD_INVALID');\r",
											"    pm.expect(response.errors[0].scope).to.eql('alias');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"alias\": \"{{alias}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "current account without account:view permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// current account without account:view permission\r",
											"const id = '60735F64B4B6A22EF2D8366928FC451F8E8DEB85';\r",
											"const randomAlias = `${pm.variables.replaceIn('{{$randomBankAccountName}}')} ${pm.variables.replaceIn('{{$randomBankAccount}}')}`;\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{tomasHerdenToken}}' });\r",
											"pm.variables.set('id', id);\r",
											"pm.variables.set('alias', randomAlias);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 403', () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test('Response contains uuid and errors array', () => {\r",
											"    pm.expect(response.uuid).to.be.a('string');\r",
											"    pm.expect(response.errors).to.be.an('array');\r",
											"    pm.expect(response.errors[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: DISALLOWED_ENDPOINT', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('DISALLOWED_ENDPOINT');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"alias\": \"{{alias}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "loan account with account:view permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// loan account with account:view permission\r",
											"const id = '3F8C5CDB0003BAB8122F93E9480F4C24901736D2';\r",
											"const randomAlias = `${pm.variables.replaceIn('{{$randomBankAccountName}}')} ${pm.variables.replaceIn('{{$randomBankAccount}}')}`;\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{tomasHerdenToken}}' });\r",
											"pm.variables.set('id', id);\r",
											"pm.variables.set('alias', randomAlias);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('Response contains uuid and errors array', () => {\r",
											"    pm.expect(response.uuid).to.be.a('string');\r",
											"    pm.expect(response.errors).to.be.an('array');\r",
											"    pm.expect(response.errors[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: ID_NOT_FOUND', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('ID_NOT_FOUND');\r",
											"    pm.expect(response.errors[0].scope).to.eql('id');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"alias\": \"{{alias}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GET /my/accounts/balances",
			"item": [
				{
					"name": "positive",
					"item": [
						{
							"name": "params",
							"item": [
								{
									"name": "without params",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const getAccounts = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{lucieJiroudkovaToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getAccounts, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const accountObj = jsonData.accounts[0];\r",
													"            pm.variables.set('accountObj', accountObj);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{lucieJiroudkovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const accountObj = pm.variables.get('accountObj');\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains same balances values from account object', () => {\r",
													"    pm.expect(response.accountBalances[0].accountId).to.eql(accountObj.id);\r",
													"    pm.expect(response.accountBalances[0].balance).to.eql(accountObj.balance);\r",
													"    pm.expect(response.accountBalances[0].disposable).to.eql(accountObj.disposable);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.pageNumber).to.eql(0);\r",
													"    pm.expect(response.pageCount).to.eql(1);\r",
													"    pm.expect(response.pageSize).to.eql(1);\r",
													"    pm.expect(response.pageSize).to.eql(response.accountBalances.length);\r",
													"    pm.expect(response).to.not.have.property('nextPage');\r",
													"    pm.expect(response.accountBalances[0].accountId).to.eql('2AE54048004F1F7376CC5946DAF022DBD5D002AF');\r",
													"    pm.expect(response.accountBalances[0].balance).to.be.an('object');\r",
													"    pm.expect(response.accountBalances[0].balance.value).to.eql(630536);\r",
													"    pm.expect(response.accountBalances[0].balance.precision).to.eql(2);\r",
													"    pm.expect(response.accountBalances[0].balance.currency).to.eql('CZK');\r",
													"    pm.expect(response.accountBalances[0].disposable).to.be.an('object');\r",
													"    pm.expect(response.accountBalances[0].disposable.value).to.eql(630536);\r",
													"    pm.expect(response.accountBalances[0].disposable.precision).to.eql(2);\r",
													"    pm.expect(response.accountBalances[0].disposable.currency).to.eql('CZK');\r",
													"});\r",
													"\r",
													"pm.test('Response does not contain local currency', () => {\r",
													"    pm.expect(response.accountBalances[0]).to.not.have.property('balanceLocalCurrency');\r",
													"    pm.expect(response.accountBalances[0]).to.not.have.property('disposableLocalCurrency');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/balances",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"balances"
											]
										}
									},
									"response": []
								},
								{
									"name": "with size",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const size = Number(pm.request.url.query.get('size'));\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.pageNumber).to.eql(0);\r",
													"    pm.expect(response.pageCount).to.eql(5);\r",
													"    pm.expect(response.nextPage).to.eql(1);\r",
													"    pm.expect(response.pageSize).to.eql(size);\r",
													"    pm.expect(response.accountBalances.length).to.eql(size);\r",
													"    pm.expect(response.accountBalances).not.to.be.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/balances?size=2",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"balances"
											],
											"query": [
												{
													"key": "size",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with size, page",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const size = Number(pm.request.url.query.get('size'));\r",
													"let page = Number(pm.request.url.query.get('page'));\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.pageNumber).to.eql(page);\r",
													"    pm.expect(response.pageCount).to.be.eql(5);\r",
													"    pm.expect(response.pageSize).to.eql(size);\r",
													"    pm.expect(response.nextPage).to.eql(++page);\r",
													"    pm.expect(response.accountBalances.length).to.eql(size);\r",
													"    pm.expect(response.accountBalances).not.to.be.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/balances?size=2&page=1",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"balances"
											],
											"query": [
												{
													"key": "size",
													"value": "2"
												},
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with one valid accountIds",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const getAccountsBalances = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts/balances'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{ivanaPetrovicovaToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getAccountsBalances, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const accountObj = jsonData.accountBalances[0];\r",
													"            pm.variables.set('accountObj', accountObj);\r",
													"            pm.variables.set('id', accountObj.accountId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains account', () => {\r",
													"    pm.expect(response.accountBalances.length).to.eql(1);\r",
													"    pm.expect(response.accountBalances[0]).to.eql(pm.variables.get('accountObj'));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/balances?accountIds={{id}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"balances"
											],
											"query": [
												{
													"key": "accountIds",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with more valid accountIds",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const validId1 = '1EE1AAA9DD2E7332651FBF01E2571963B4E735E7'\r",
													"const validId2 = '626B402CD6E913A91E13BE45402E6C2F86A6FCBF'\r",
													"const validId3 = '309C2326A3A6C48B2A9472D507648D4D0A0C5F27';\r",
													"ids = `${validId1},${validId2},${validId3}`\r",
													"pm.variables.set('ids', ids);\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains all accounts from parameter', () => {\r",
													"    pm.expect(response.accountBalances.length).to.eql(3);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/balances?accountIds={{ids}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"balances"
											],
											"query": [
												{
													"key": "accountIds",
													"value": "{{ids}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with all valid accountIds",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const getAccountsBalances = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts/balances'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{ivanaPetrovicovaToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getAccountsBalances, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const ids = jsonData.accountBalances.map(account => account.accountId);\r",
													"            pm.variables.set('ids', ids);\r",
													"            pm.variables.set('accountBalancesLength', ids.length);\r",
													"            pm.variables.set('accountBalances', jsonData.accountBalances);             \r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const accountBalancesLength = pm.variables.get('accountBalancesLength');\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`Response contains all ${accountBalancesLength} account balances`, () => {\r",
													"    pm.expect(response.accountBalances.length).to.eql(accountBalancesLength);\r",
													"    pm.expect(response.accountBalances).to.eql(pm.variables.get('accountBalances'));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/balances?accountIds={{ids}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"balances"
											],
											"query": [
												{
													"key": "accountIds",
													"value": "{{ids}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "current account in local currency",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getAccounts = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{ivanaPetrovicovaToken}}')\r",
											"    }\r",
											"};\r",
											"const czkAccount = '3074A176859F65060FE85549E40FDE62834361FF';\r",
											"\r",
											"pm.sendRequest(getAccounts, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const accountObj = jsonData.accounts.find(account => account.id === czkAccount);\r",
											"            pm.variables.set('accountObj', accountObj);\r",
											"            pm.variables.set('id', accountObj.id);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const accountObj = pm.variables.get('accountObj');\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains same balances values from account object', () => {\r",
											"    pm.expect(response.accountBalances[0].accountId).to.eql(accountObj.id);\r",
											"    pm.expect(response.accountBalances[0].balance).to.eql(accountObj.balance);\r",
											"    pm.expect(response.accountBalances[0].disposable).to.eql(accountObj.disposable);\r",
											"});\r",
											"\r",
											"pm.test('Response does not contain local currency', () => {\r",
											"    pm.expect(response).to.not.have.property('balanceLocalCurrency');\r",
											"    pm.expect(response).to.not.have.property('disposableLocalCurrency');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/balances?accountIds={{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"balances"
									],
									"query": [
										{
											"key": "accountIds",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "current account in foreign currency",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getAccounts = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{ivanaPetrovicovaToken}}')\r",
											"    }\r",
											"};\r",
											"const getExchangeRates = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/info/fx?currencyCodes=EUR'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{ivanaPetrovicovaToken}}')\r",
											"    }\r",
											"};\r",
											"const eurAccount = '75E8234F366D440987086B05F35E97748F9728C2';\r",
											"\r",
											"pm.sendRequest(getAccounts, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const accountObj = jsonData.accounts.find(account => account.id === eurAccount);\r",
											"            pm.variables.set('accountObj', accountObj);\r",
											"            pm.variables.set('id', accountObj.id);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.sendRequest(getExchangeRates, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const exchangeRate = jsonData.fx[0].exchangeRate.middle;\r",
											"            pm.variables.set('exchangeRate', exchangeRate);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const accountObj = pm.variables.get('accountObj');\r",
											"const exchangeRate = pm.variables.get('exchangeRate');\r",
											"const localBalanceValue = Math.round(accountObj.balance.value * exchangeRate);\r",
											"const localDisposableValue = Math.round(accountObj.disposable.value * exchangeRate);\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains same balances values from account object', () => {\r",
											"    pm.expect(response.accountBalances[0].accountId).to.eql(accountObj.id);\r",
											"    pm.expect(response.accountBalances[0].balance).to.eql(accountObj.balance);\r",
											"    pm.expect(response.accountBalances[0].disposable).to.eql(accountObj.disposable);\r",
											"});\r",
											"\r",
											"pm.test('Response contains local currency', () => {\r",
											"    pm.expect(response.accountBalances[0].balanceLocalCurrency).to.be.an('object');\r",
											"    pm.expect(response.accountBalances[0].balanceLocalCurrency.value).to.eql(localBalanceValue);\r",
											"    pm.expect(response.accountBalances[0].balanceLocalCurrency.precision).to.eql(2);\r",
											"    pm.expect(response.accountBalances[0].balanceLocalCurrency.currency).to.eql('CZK');\r",
											"    pm.expect(response.accountBalances[0].disposableLocalCurrency).to.be.an('object');\r",
											"    pm.expect(response.accountBalances[0].disposableLocalCurrency.value).to.eql(localDisposableValue);\r",
											"    pm.expect(response.accountBalances[0].disposableLocalCurrency.precision).to.eql(2);\r",
											"    pm.expect(response.accountBalances[0].disposableLocalCurrency.currency).to.eql('CZK');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/balances?accountIds={{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"balances"
									],
									"query": [
										{
											"key": "accountIds",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "loan account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// loan account with account:view permission\r",
											"const id = '3F8C5CDB0003BAB8122F93E9480F4C24901736D2';\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{tomasHerdenToken}}' });\r",
											"pm.variables.set('id', id);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.accountBalances[0].accountId).to.eql(pm.variables.get('id'));\r",
											"    pm.expect(response.accountBalances[0].balance).to.be.an('object');\r",
											"    pm.expect(response.accountBalances[0].balance.value).to.eql(-3158868);\r",
											"    pm.expect(response.accountBalances[0].balance.precision).to.eql(2);\r",
											"    pm.expect(response.accountBalances[0].balance.currency).to.eql('CZK');\r",
											"    pm.expect(response.accountBalances[0].disposable).to.be.an('object');\r",
											"    pm.expect(response.accountBalances[0].disposable.value).to.eql(31841132);\r",
											"    pm.expect(response.accountBalances[0].disposable.precision).to.eql(2);\r",
											"    pm.expect(response.accountBalances[0].disposable.currency).to.eql('CZK');\r",
											"});\r",
											"\r",
											"pm.test('Response does not contain local currency', () => {\r",
											"    pm.expect(response.accountBalances).to.not.have.property('balanceLocalCurrency');\r",
											"    pm.expect(response.accountBalances).to.not.have.property('disposableLocalCurrency');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/balances?accountIds={{id}}",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"balances"
									],
									"query": [
										{
											"key": "accountIds",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client with 400+ accounts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{kristynaRousovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains empty account array', () => {\r",
											"    pm.expect(response.pageSize).to.eql(response.accountBalances.length);\r",
											"    pm.expect(response.accountBalances.length).to.be.above(400)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/balances",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate schema",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"required\": [\r",
											"        \"pageNumber\",\r",
											"        \"pageCount\",\r",
											"        \"pageSize\",\r",
											"        \"accountBalances\",\r",
											"        \"nextPage\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"pageNumber\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"pageCount\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"pageSize\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"accountBalances\": {\r",
											"            \"type\": \"array\",\r",
											"            \"uniqueItems\": true,\r",
											"            \"additionalItems\": false,\r",
											"            \"items\": {\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"type\": \"object\",\r",
											"                        \"required\": [\r",
											"                            \"accountId\",\r",
											"                            \"balance\",\r",
											"                            \"disposable\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"accountId\": {\r",
											"                                \"type\": \"string\"\r",
											"                            },\r",
											"                            \"balance\": {\r",
											"                                \"type\": \"object\",\r",
											"                                \"required\": [\r",
											"                                    \"value\",\r",
											"                                    \"precision\",\r",
											"                                    \"currency\"\r",
											"                                ],\r",
											"                                \"properties\": {\r",
											"                                    \"value\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"precision\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"currency\": {\r",
											"                                        \"type\": \"string\"\r",
											"                                    }\r",
											"                                },\r",
											"                                \"additionalProperties\": false\r",
											"                            },\r",
											"                            \"disposable\": {\r",
											"                                \"type\": \"object\",\r",
											"                                \"required\": [\r",
											"                                    \"value\",\r",
											"                                    \"precision\",\r",
											"                                    \"currency\"\r",
											"                                ],\r",
											"                                \"properties\": {\r",
											"                                    \"value\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"precision\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"currency\": {\r",
											"                                        \"type\": \"string\"\r",
											"                                    }\r",
											"                                },\r",
											"                                \"additionalProperties\": false\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": false\r",
											"                    },\r",
											"                    {\r",
											"                        \"type\": \"object\",\r",
											"                        \"required\": [\r",
											"                            \"accountId\",\r",
											"                            \"balance\",\r",
											"                            \"balanceLocalCurrency\",\r",
											"                            \"disposable\",\r",
											"                            \"disposableLocalCurrency\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"accountId\": {\r",
											"                                \"type\": \"string\"\r",
											"                            },\r",
											"                            \"balance\": {\r",
											"                                \"type\": \"object\",\r",
											"                                \"required\": [\r",
											"                                    \"value\",\r",
											"                                    \"precision\",\r",
											"                                    \"currency\"\r",
											"                                ],\r",
											"                                \"properties\": {\r",
											"                                    \"value\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"precision\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"currency\": {\r",
											"                                        \"type\": \"string\"\r",
											"                                    }\r",
											"                                },\r",
											"                                \"additionalProperties\": false\r",
											"                            },\r",
											"                            \"balanceLocalCurrency\": {\r",
											"                                \"type\": \"object\",\r",
											"                                \"required\": [\r",
											"                                    \"value\",\r",
											"                                    \"precision\",\r",
											"                                    \"currency\"\r",
											"                                ],\r",
											"                                \"properties\": {\r",
											"                                    \"value\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"precision\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"currency\": {\r",
											"                                        \"type\": \"string\"\r",
											"                                    }\r",
											"                                },\r",
											"                                \"additionalProperties\": false\r",
											"                            },\r",
											"                            \"disposable\": {\r",
											"                                \"type\": \"object\",\r",
											"                                \"required\": [\r",
											"                                    \"value\",\r",
											"                                    \"precision\",\r",
											"                                    \"currency\"\r",
											"                                ],\r",
											"                                \"properties\": {\r",
											"                                    \"value\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"precision\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"currency\": {\r",
											"                                        \"type\": \"string\"\r",
											"                                    }\r",
											"                                },\r",
											"                                \"additionalProperties\": false\r",
											"                            },\r",
											"                            \"disposableLocalCurrency\": {\r",
											"                                \"type\": \"object\",\r",
											"                                \"required\": [\r",
											"                                    \"value\",\r",
											"                                    \"precision\",\r",
											"                                    \"currency\"\r",
											"                                ],\r",
											"                                \"properties\": {\r",
											"                                    \"value\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"precision\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"currency\": {\r",
											"                                        \"type\": \"string\"\r",
											"                                    }\r",
											"                                },\r",
											"                                \"additionalProperties\": false\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": false\r",
											"                    },\r",
											"                    {\r",
											"                        \"type\": \"object\",\r",
											"                        \"required\": [\r",
											"                            \"accountId\",\r",
											"                            \"balance\",\r",
											"                            \"balanceLocalCurrency\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"accountId\": {\r",
											"                                \"type\": \"string\"\r",
											"                            },\r",
											"                            \"balance\": {\r",
											"                                \"type\": \"object\",\r",
											"                                \"required\": [\r",
											"                                    \"value\",\r",
											"                                    \"precision\",\r",
											"                                    \"currency\"\r",
											"                                ],\r",
											"                                \"properties\": {\r",
											"                                    \"value\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"precision\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"currency\": {\r",
											"                                        \"type\": \"string\"\r",
											"                                    }\r",
											"                                },\r",
											"                                \"additionalProperties\": false\r",
											"                            },\r",
											"                            \"balanceLocalCurrency\": {\r",
											"                                \"type\": \"object\",\r",
											"                                \"required\": [\r",
											"                                    \"value\",\r",
											"                                    \"precision\",\r",
											"                                    \"currency\"\r",
											"                                ],\r",
											"                                \"properties\": {\r",
											"                                    \"value\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"precision\": {\r",
											"                                        \"type\": \"integer\"\r",
											"                                    },\r",
											"                                    \"currency\": {\r",
											"                                        \"type\": \"string\"\r",
											"                                    }\r",
											"                                },\r",
											"                                \"additionalProperties\": false\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": false\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        },\r",
											"        \"nextPage\": {\r",
											"            \"type\": \"integer\"\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": false\r",
											"}\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/balances?size=2&page=2",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"balances"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "negative",
					"item": [
						{
							"name": "auth",
							"item": [
								{
									"name": "401 subscription key missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/balances",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"balances"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/balances",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"balances"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token invalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/{{id}}/balances",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"{{id}}",
												"balances"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "params",
							"item": [
								{
									"name": "with empty accountIds",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 404', () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Response contains uuid and errors array', () => {\r",
													"    pm.expect(response.uuid).to.be.a('string');\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: UNKNOWN_PRODUCT', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('UNKNOWN_PRODUCT');\r",
													"    pm.expect(response.errors[0].scope).to.eql('accountIds');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/balances?accountIds=",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"balances"
											],
											"query": [
												{
													"key": "accountIds",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with one invalid accountIds",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const invalidId = 'C2B64534C2247CAP018E19F274E35679A8D0ECB1';\r",
													"pm.variables.set('id', invalidId);\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 404', () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Response contains uuid and errors array', () => {\r",
													"    pm.expect(response.uuid).to.be.a('string');\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: UNKNOWN_PRODUCT', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('UNKNOWN_PRODUCT');\r",
													"    pm.expect(response.errors[0].scope).to.eql('accountIds');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/balances?accountIds={{id}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"balances"
											],
											"query": [
												{
													"key": "accountIds",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid and invalid accountIds",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const validId = '3074A176859F65060FE85549E40FDE62834361FF'\r",
													"const invalidId = 'C2B64534C2247CAP018E19F274E35679A8D0ECB1';\r",
													"ids = `${validId},${invalidId}`\r",
													"pm.variables.set('ids', ids);\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 404', () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Response contains uuid and errors array', () => {\r",
													"    pm.expect(response.uuid).to.be.a('string');\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: UNKNOWN_PRODUCT', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('UNKNOWN_PRODUCT');\r",
													"    pm.expect(response.errors[0].scope).to.eql('accountIds');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/balances?accountIds={{ids}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"balances"
											],
											"query": [
												{
													"key": "accountIds",
													"value": "{{ids}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid and invalid(without active:view permission) accountIds",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const validId = '7D353488DF0968B7E0356FAD95DC3AB342C84C61'\r",
													"//product without active:view permission\r",
													"const invalidId = '88DF10564297C384D5A900CD8119425506260B24';\r",
													"ids = `${validId},${invalidId}`\r",
													"pm.variables.set('ids', ids);\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{zuzanaMasatovaToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 404', () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Response contains uuid and errors array', () => {\r",
													"    pm.expect(response.uuid).to.be.a('string');\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: INSUFFICIENT_RIGHTS', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('INSUFFICIENT_RIGHTS');\r",
													"    pm.expect(response.errors[0].scope).to.eql('accountIds');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/balances?accountIds={{ids}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"balances"
											],
											"query": [
												{
													"key": "accountIds",
													"value": "{{ids}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "client with current account without account:view permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{pavelKrepelkaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('Response contains uuid and errors array', () => {\r",
											"    pm.expect(response.uuid).to.be.a('string');\r",
											"    pm.expect(response.errors).to.be.an('array');\r",
											"    pm.expect(response.errors[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: INSUFFICIENT_RIGHTS', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('INSUFFICIENT_RIGHTS');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/balances",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "client without dispo record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{alesPokornyToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('Response contains uuid and errors array', () => {\r",
											"    pm.expect(response.uuid).to.be.a('string');\r",
											"    pm.expect(response.errors).to.be.an('array');\r",
											"    pm.expect(response.errors[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: UNKNOWN_PRODUCT', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('UNKNOWN_PRODUCT');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/balances",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"balances"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GET /my/accounts/{id}/balances",
			"item": [
				{
					"name": "positive",
					"item": [
						{
							"name": "current account in local currency",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getAccountsBalances = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts/balances'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{ivanaPetrovicovaToken}}')\r",
											"    }\r",
											"};\r",
											"const czkAccount = '3074A176859F65060FE85549E40FDE62834361FF';\r",
											"\r",
											"pm.sendRequest(getAccountsBalances, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const accountObj = jsonData.accountBalances.find(account => account.accountId === czkAccount);\r",
											"            pm.variables.set('accountObj', accountObj);\r",
											"            pm.variables.set('id', accountObj.accountId);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const accountObj = pm.variables.get('accountObj');\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains same balances values from account object', () => {\r",
											"    pm.expect(response).to.eql(accountObj);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.accountId).to.eql('3074A176859F65060FE85549E40FDE62834361FF');\r",
											"    pm.expect(response.balance).to.be.an('object');\r",
											"    pm.expect(response.balance.value).to.eql(32026741);\r",
											"    pm.expect(response.balance.precision).to.eql(2);\r",
											"    pm.expect(response.balance.currency).to.eql('CZK');\r",
											"    pm.expect(response.disposable).to.be.an('object');\r",
											"    pm.expect(response.disposable.value).to.eql(32026741);\r",
											"    pm.expect(response.disposable.precision).to.eql(2);\r",
											"    pm.expect(response.disposable.currency).to.eql('CZK');\r",
											"});\r",
											"\r",
											"pm.test('Response does not contain local currency', () => {\r",
											"    pm.expect(response).to.not.have.property('balanceLocalCurrency');\r",
											"    pm.expect(response).to.not.have.property('disposableLocalCurrency');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}/balances",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "current account in foreign currency",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getAccountsBalances = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts/balances'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{ivanaPetrovicovaToken}}')\r",
											"    }\r",
											"};\r",
											"const getExchangeRates = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/info/fx?currencyCodes=EUR'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{ivanaPetrovicovaToken}}')\r",
											"    }\r",
											"};\r",
											"const eurAccount = '75E8234F366D440987086B05F35E97748F9728C2';\r",
											"\r",
											"pm.sendRequest(getAccountsBalances, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const accountObj = jsonData.accountBalances.find(account => account.accountId === eurAccount);\r",
											"            pm.variables.set('accountObj', accountObj);\r",
											"            pm.variables.set('id', accountObj.accountId);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.sendRequest(getExchangeRates, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const exchangeRate = jsonData.fx[0].exchangeRate.middle;\r",
											"            pm.variables.set('exchangeRate', exchangeRate);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const accountObj = pm.variables.get('accountObj');\r",
											"const exchangeRate = pm.variables.get('exchangeRate');\r",
											"const localBalanceValue = Math.round(accountObj.balance.value * exchangeRate);\r",
											"const localDisposableValue = Math.round(accountObj.disposable.value * exchangeRate);\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains same balances values from account object', () => {\r",
											"    pm.expect(response).to.eql(accountObj);\r",
											"});\r",
											"\r",
											"pm.test('Response contains local currency', () => {\r",
											"    pm.expect(response.balanceLocalCurrency).to.be.an('object');\r",
											"    pm.expect(response.balanceLocalCurrency.value).to.eql(localBalanceValue);\r",
											"    pm.expect(response.balanceLocalCurrency.precision).to.eql(2);\r",
											"    pm.expect(response.balanceLocalCurrency.currency).to.eql('CZK');\r",
											"    pm.expect(response.disposableLocalCurrency).to.be.an('object');\r",
											"    pm.expect(response.disposableLocalCurrency.value).to.eql(localDisposableValue);\r",
											"    pm.expect(response.disposableLocalCurrency.precision).to.eql(2);\r",
											"    pm.expect(response.disposableLocalCurrency.currency).to.eql('CZK');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}/balances",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "loan account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// loan account with account:view permission\r",
											"const id = '3F8C5CDB0003BAB8122F93E9480F4C24901736D2';\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{tomasHerdenToken}}' });\r",
											"pm.variables.set('id', id);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.accountId).to.eql(pm.variables.get('id'));\r",
											"    pm.expect(response.balance).to.be.an('object');\r",
											"    pm.expect(response.balance.value).to.eql(-3158868);\r",
											"    pm.expect(response.balance.precision).to.eql(2);\r",
											"    pm.expect(response.balance.currency).to.eql('CZK');\r",
											"    pm.expect(response.disposable).to.be.an('object');\r",
											"    pm.expect(response.disposable.value).to.eql(31841132);\r",
											"    pm.expect(response.disposable.precision).to.eql(2);\r",
											"    pm.expect(response.disposable.currency).to.eql('CZK');\r",
											"});\r",
											"\r",
											"pm.test('Response does not contain local currency', () => {\r",
											"    pm.expect(response).to.not.have.property('balanceLocalCurrency');\r",
											"    pm.expect(response).to.not.have.property('disposableLocalCurrency');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}/balances",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "id balance - client with 400+ accounts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getAccounts = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{kristynaRousovaToken}}')\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getAccounts, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const accountObj = jsonData.accounts[0];\r",
											"            pm.variables.set('accountObj', accountObj);\r",
											"            pm.variables.set('id', accountObj.id);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{kristynaRousovaToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const accountObj = pm.variables.get('accountObj');\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains same values as balances from account object', () => {\r",
											"    pm.expect(response.accountId).to.eql(accountObj.id);\r",
											"    pm.expect(response.balance).to.eql(accountObj.balance);\r",
											"    pm.expect(response.disposable).to.eql(accountObj.disposable);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}/balances",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate schema",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getAccounts = {\r",
											"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
											"        'Authorization': pm.variables.replaceIn('Bearer {{lenkaHajkovaToken}}')\r",
											"    }\r",
											"};\r",
											"eurAccount = '4E26696BEB35572E8A83F235A09AA8B8949EDAC2';\r",
											"\r",
											"pm.sendRequest(getAccounts, (error, response) => {\r",
											"    if (error) {\r",
											"        console.log(error);\r",
											"    } else {\r",
											"        const jsonData = response.json();\r",
											"        try {\r",
											"            const accountObj = jsonData.accounts.find(account => account.id === eurAccount);\r",
											"            pm.variables.set('accountObj', accountObj);\r",
											"            pm.variables.set('id', accountObj.id);\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"required\": [\r",
											"        \"accountId\",\r",
											"        \"balance\",\r",
											"        \"balanceLocalCurrency\",\r",
											"        \"disposable\",\r",
											"        \"disposableLocalCurrency\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"accountId\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"balance\": {\r",
											"            \"type\": \"object\",\r",
											"            \"required\": [\r",
											"                \"value\",\r",
											"                \"precision\",\r",
											"                \"currency\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"value\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"precision\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"currency\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": false\r",
											"        },\r",
											"        \"balanceLocalCurrency\": {\r",
											"            \"type\": \"object\",\r",
											"            \"required\": [\r",
											"                \"value\",\r",
											"                \"precision\",\r",
											"                \"currency\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"value\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"precision\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"currency\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": false\r",
											"        },\r",
											"        \"disposable\": {\r",
											"            \"type\": \"object\",\r",
											"            \"required\": [\r",
											"                \"value\",\r",
											"                \"precision\",\r",
											"                \"currency\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"value\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"precision\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"currency\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": false\r",
											"        },\r",
											"        \"disposableLocalCurrency\": {\r",
											"            \"type\": \"object\",\r",
											"            \"required\": [\r",
											"                \"value\",\r",
											"                \"precision\",\r",
											"                \"currency\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"value\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"precision\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"currency\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": false\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": false\r",
											"}\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}/balances",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}",
										"balances"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "negative",
					"item": [
						{
							"name": "auth",
							"item": [
								{
									"name": "401 subscription key missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const getAccounts = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{lucieJiroudkovaToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getAccounts, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        const accountObj = jsonData.accounts[0];\r",
													"        pm.variables.set('accountObj', accountObj);\r",
													"        pm.variables.set('id', accountObj.id);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/{{id}}/balances",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"{{id}}",
												"balances"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const getAccounts = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{lucieJiroudkovaToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getAccounts, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        const accountObj = jsonData.accounts[0];\r",
													"        pm.variables.set('accountObj', accountObj);\r",
													"        pm.variables.set('id', accountObj.id);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/{{id}}/balances",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"{{id}}",
												"balances"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token invalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const getAccounts = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/accounts'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{lucieJiroudkovaToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getAccounts, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        const accountObj = jsonData.accounts[0];\r",
													"        pm.variables.set('accountObj', accountObj);\r",
													"        pm.variables.set('id', accountObj.id);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/accounts/{{id}}/balances",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"accounts",
												"{{id}}",
												"balances"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "invalid id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 403', () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test('Response contains uuid and errors array', () => {\r",
											"    pm.expect(response.uuid).to.be.a('string');\r",
											"    pm.expect(response.errors).to.be.an('array');\r",
											"    pm.expect(response.errors[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: DISALLOWED_ENDPOINT', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('DISALLOWED_ENDPOINT');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/2AE54048004F1F7376CC5946DCF022DBD5D002AG/balances",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"2AE54048004F1F7376CC5946DCF022DBD5D002AG",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "current account without account:view permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// current account without account:view permission\r",
											"const id = '60735F64B4B6A22EF2D8366928FC451F8E8DEB85';\r",
											"\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{tomasHerdenToken}}' });\r",
											"pm.variables.set('id', id);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 403', () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test('Response contains uuid and errors array', () => {\r",
											"    pm.expect(response.uuid).to.be.a('string');\r",
											"    pm.expect(response.errors).to.be.an('array');\r",
											"    pm.expect(response.errors[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: DISALLOWED_ENDPOINT', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('DISALLOWED_ENDPOINT');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/accounts/{{id}}/balances",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"accounts",
										"{{id}}",
										"balances"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GET /info/financialinstitution",
			"item": [
				{
					"name": "positive",
					"item": [
						{
							"name": "bic -Spořka",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.id).to.eql('GIBACZPXXXX');\r",
											"    pm.expect(response.name).to.eql('CESKA SPORITELNA A.S.');\r",
											"    pm.expect(response.streetNumber).to.eql('OLBRACHTOVA, 62');\r",
											"    pm.expect(response.zipCodeCity).to.eql('140 00 PRAGUE');\r",
											"    pm.expect(response.countryCode).to.eql('CZ');\r",
											"    pm.expect(response.flags).to.eql([]);\r",
											"}); // Lze poslat jen bic, nebo kombinaci bankCode+countryCode."
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution?bic=GIBACZPX",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									],
									"query": [
										{
											"key": "bic",
											"value": "GIBACZPX",
											"description": "Česká Spořitelna"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "bic -Komerčka",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.id).to.eql('KOMBCZPPXXX');\r",
											"    pm.expect(response.name).to.eql('KOMERCNI BANKA A.S.');\r",
											"    pm.expect(response.streetNumber).to.eql('NA PRIKOPE, 33');\r",
											"    pm.expect(response.zipCodeCity).to.eql('114 07 PRAGUE');\r",
											"    pm.expect(response.countryCode).to.eql('CZ');\r",
											"    pm.expect(response.flags).to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution?bic=KOMBCZPP",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									],
									"query": [
										{
											"key": "bic",
											"value": "KOMBCZPP",
											"description": "Komerční banka"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "validate schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"required\": [\r",
											"        \"id\",\r",
											"        \"name\",\r",
											"        \"streetNumber\",\r",
											"        \"zipCodeCity\",\r",
											"        \"countryCode\",\r",
											"        \"flags\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"id\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"streetNumber\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"zipCodeCity\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"countryCode\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"flags\": {\r",
											"            \"type\": \"array\",\r",
											"            \"uniqueItems\": true,\r",
											"            \"additionalItems\": false,\r",
											"            \"minItems\": 0,\r",
											"            \"maxItems\": 0\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution?bic=GIBACZPX",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									],
									"query": [
										{
											"key": "bic",
											"value": "GIBACZPX",
											"description": "Česká Spořitelna"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "bic -TatrabankaSK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.id).to.eql('TATRSKBXXXX');\r",
											"    pm.expect(response.name).to.eql('TATRA BANKA A.S.');\r",
											"    pm.expect(response.countryCode).to.eql('SK');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution?bic=TATRSKBX",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									],
									"query": [
										{
											"key": "bic",
											"value": "TATRSKBX",
											"description": "Tatrabanka, Slovensko"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "bankCode+countryCode -Spořka",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.id).to.eql('GIBACZPXXXX');\r",
											"    pm.expect(response.name).to.eql('CESKA SPORITELNA A.S.');\r",
											"    pm.expect(response.streetNumber).to.eql('OLBRACHTOVA, 62');\r",
											"    pm.expect(response.zipCodeCity).to.eql('140 00 PRAGUE');\r",
											"    pm.expect(response.countryCode).to.eql('CZ');\r",
											"    pm.expect(response.flags).to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution?bankCode=0800&countryCode=CZ",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									],
									"query": [
										{
											"key": "bankCode",
											"value": "0800",
											"description": "Česká spořitelna"
										},
										{
											"key": "countryCode",
											"value": "CZ"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "bankCode+countryCode -Komerčka",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.id).to.eql('KOMBCZPPXXX');\r",
											"    pm.expect(response.name).to.eql('KOMERCNI BANKA A.S.');\r",
											"    pm.expect(response.countryCode).to.eql('CZ');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution?bankCode=0100&countryCode=CZ",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									],
									"query": [
										{
											"key": "bankCode",
											"value": "0100",
											"description": "Komerční banka"
										},
										{
											"key": "countryCode",
											"value": "CZ"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "bankCode+countryCode -TatrabankaSK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.id).to.eql('TATRSKBXXXX');\r",
											"    pm.expect(response.name).to.eql('TATRA BANKA A.S.');\r",
											"    pm.expect(response.countryCode).to.eql('SK');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution?bankCode=1100&countryCode=SK",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									],
									"query": [
										{
											"key": "bankCode",
											"value": "1100",
											"description": "Tatrabanka, Slovensko"
										},
										{
											"key": "countryCode",
											"value": "SK",
											"description": "Tatrabanka, Slovensko"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "bic+countryCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values according to bic parameter', () => {\r",
											"    pm.expect(response.id).to.eql('KOMBCZPPXXX');\r",
											"    pm.expect(response.name).to.eql('KOMERCNI BANKA A.S.');\r",
											"    pm.expect(response.countryCode).to.eql('CZ');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution?bic=KOMBCZPP&countryCode=SK",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									],
									"query": [
										{
											"key": "bic",
											"value": "KOMBCZPP"
										},
										{
											"key": "countryCode",
											"value": "SK"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "negative",
					"item": [
						{
							"name": "auth",
							"item": [
								{
									"name": "401 subscription key missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/info/financialinstitution",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"info",
												"financialinstitution"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/info/financialinstitution",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"info",
												"financialinstitution"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token invalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/info/financialinstitution",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"info",
												"financialinstitution"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "without params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: FIELD_MISSING', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('FIELD_MISSING');\r",
											"    pm.expect(response.errors[0].scope).to.eql('bic');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									]
								}
							},
							"response": []
						},
						{
							"name": "without bankCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: FIELD_MISSING', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('FIELD_MISSING');\r",
											"    pm.expect(response.errors[0].scope).to.eql('bankCode');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution?countryCode=CZ",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "CZ"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "without countryCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: FIELD_MISSING', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('FIELD_MISSING');\r",
											"    pm.expect(response.errors[0].scope).to.eql('countryCode');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution?bankCode=0100",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									],
									"query": [
										{
											"key": "bankCode",
											"value": "0100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "with bic, with bankCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test('Response contains error message: INTEGRITY', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('INTEGRITY');\r",
											"    pm.expect(response.errors[0].scope).to.eql('bic');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution?bic=KOMBCZPP&bankCode=0800",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									],
									"query": [
										{
											"key": "bic",
											"value": "KOMBCZPP"
										},
										{
											"key": "bankCode",
											"value": "0800"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "with bic, with bankCode, with countryCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: INTEGRITY', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('INTEGRITY');\r",
											"    pm.expect(response.errors[0].scope).to.eql('bic');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution?bic=KOMBCZPP&bankCode=0800&countryCode=CZ",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									],
									"query": [
										{
											"key": "bic",
											"value": "KOMBCZPP"
										},
										{
											"key": "bankCode",
											"value": "0800"
										},
										{
											"key": "countryCode",
											"value": "CZ"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "with invalid bic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: NOT_FOUND', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('NOT_FOUND');\r",
											"    pm.expect(response.errors[0].scope).to.eql('bic');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution?bic=mmmm",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									],
									"query": [
										{
											"key": "bic",
											"value": "mmmm",
											"description": "vymyšlené"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "with invalid bankCode, with invalid countryCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('Response contains error message: NOT_FOUND', () => {\r",
											"    pm.expect(response.errors).to.have.lengthOf(1);\r",
											"    pm.expect(response.errors[0].error).to.eql('NOT_FOUND');\r",
											"    pm.expect(response.errors[0].scope).to.eql('bankCode');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/info/financialinstitution?bankCode=0000&countryCode=XX",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"info",
										"financialinstitution"
									],
									"query": [
										{
											"key": "bankCode",
											"value": "0000"
										},
										{
											"key": "countryCode",
											"value": "XX"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{lenkaHajkovaToken}}' });",
					"pm.request.headers.add({ key: 'Ocp-Apim-Subscription-Key', value: '{{OcpApimKey}}' });",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test('Response must be valid and have body', ()=> {",
					"    pm.expect(pm.response.to.be.withBody);",
					"});",
					"",
					"pm.test('Header contains Content-Type application/json', ()=> {",
					"    pm.expect(pm.response).to.have.header('Content-type');",
					"    pm.expect(pm.response.headers.get('content-Type')).to.contain('application/json');",
					"});",
					"",
					"pm.test('Response time is less than 6000ms', ()=> {",
					"    pm.expect(pm.response.responseTime).to.be.below(6000);",
					"});",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "keyMissingTests",
			"value": ""
		},
		{
			"key": "tokenMissingTests",
			"value": ""
		},
		{
			"key": "tokenInvalidTests",
			"value": ""
		},
		{
			"key": "tokenInvalidAudienceTests",
			"value": ""
		},
		{
			"key": "invalidToken",
			"value": ""
		},
		{
			"key": "alexanderOravecToken",
			"value": ""
		},
		{
			"key": "hanaFodorovaToken",
			"value": ""
		},
		{
			"key": "antoninValentaToken",
			"value": ""
		},
		{
			"key": "miroslavKupcikToken",
			"value": ""
		},
		{
			"key": "alesPokornyToken",
			"value": ""
		},
		{
			"key": "davidKarolToken",
			"value": ""
		},
		{
			"key": "janSukToken",
			"value": ""
		},
		{
			"key": "marcelaNovotnaToken",
			"value": ""
		},
		{
			"key": "romanProchazkaToken",
			"value": ""
		},
		{
			"key": "lucieJiroudkovaToken",
			"value": ""
		},
		{
			"key": "tomasHerdenToken",
			"value": ""
		},
		{
			"key": "pavelKrepelkaToken",
			"value": ""
		},
		{
			"key": "kristynaRousovaToken",
			"value": ""
		},
		{
			"key": "petrBreskyToken",
			"value": ""
		},
		{
			"key": "ivanaPetrovicovaToken",
			"value": ""
		},
		{
			"key": "michaelaVikovaToken",
			"value": ""
		},
		{
			"key": "marcelaAdamcovaToken",
			"value": ""
		},
		{
			"key": "olgaHorakovaToken",
			"value": ""
		},
		{
			"key": "jiriOubornyToken",
			"value": ""
		},
		{
			"key": "zuzanaMasatovaToken",
			"value": ""
		},
		{
			"key": "michalPribylToken",
			"value": ""
		},
		{
			"key": "InvalidAudienceToken",
			"value": ""
		},
		{
			"key": "zdenekKonecnyToken",
			"value": ""
		},
		{
			"key": "lenkaHajkovaToken",
			"value": ""
		},
		{
			"key": "petrSpacekToken",
			"value": ""
		}
	]
}