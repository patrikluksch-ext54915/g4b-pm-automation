{
	"info": {
		"_postman_id": "0600471a-0e05-4d73-8ea3-553e1dcfba8c",
		"name": "CF - cards4b-management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23141207"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const clients = ['zdenekKonecny','alesPokorny', 'marcelaAdamcova', 'antoninValenta', 'davidKarol', 'alexanderOravec', 'lenkaHajkova', 'lucieJiroudkova', 'pavelKrepelka', 'hanaFodorova', 'michalPribyl', 'olgaHorakova', 'zuzanaMasatova', 'tomasHerden', 'kristynaRousova', 'michaelaVikova', 'petrSpacek', 'ivanaPetrovicova', 'miroslavKupcik', 'janSuk','jiriOuborny', 'romanProchazka', 'petrBresky', 'marcelaNovotna']\r",
									"\r",
									"const auth = (cluid) => {\r",
									"    const auth = {\r",
									"        url: pm.variables.replaceIn(`{{mepTokenUrl}}?web-api-key={{mepTokenWebApiKey}}&client_id=george_for_business&cluid={{${cluid}}}&expires_in=28800&scenario_key=s_authn_sca_pwd_sms`),\r",
									"        method: 'GET'\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(auth, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        } else {\r",
									"            const jsonData = response.json();\r",
									"            pm.collectionVariables.set(`${cluid}Token`, jsonData.access_token);\r",
									"        }\r",
									"    });\r",
									"};\r",
									"\r",
									"clients.forEach(cluid => auth(cluid))\r",
									"\r",
									"const authInvalidAudience = (cluid) => {\r",
									"    const auth = {\r",
									"        url: pm.variables.replaceIn(`{{mepTokenUrl}}?web-api-key={{mepTokenWebApiKey}}&client_id=george_ticketing_client&cluid=${cluid}&expires_in=28800&scenario_key=s_authn_sca_pwd_sms`),\r",
									"        method: 'GET'\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(auth, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        } else {\r",
									"            const jsonData = response.json();\r",
									"            pm.collectionVariables.set(`InvalidAudienceToken`, jsonData.access_token);\r",
									"        }\r",
									"    });\r",
									"};\r",
									"\r",
									"authInvalidAudience('1997-04-10-22.11.11.258187')\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mepTokenUrl}}?web-api-key={{mepTokenWebApiKey}}&client_id=george_for_business&cluid={{lenkaHajkova}}&expires_in=3600&scenario_key=s_authn_sca_pwd_sms",
							"host": [
								"{{mepTokenUrl}}"
							],
							"query": [
								{
									"key": "web-api-key",
									"value": "{{mepTokenWebApiKey}}"
								},
								{
									"key": "client_id",
									"value": "george_for_business"
								},
								{
									"key": "cluid",
									"value": "{{lenkaHajkova}}"
								},
								{
									"key": "expires_in",
									"value": "3600"
								},
								{
									"key": "scenario_key",
									"value": "s_authn_sca_pwd_sms"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//Error tests",
							"const keyMissingTests = () => {",
							"    const response = pm.response.json();",
							"",
							"    pm.test('Status code is 401', () => {",
							"        pm.response.to.have.status(401);",
							"    });",
							"",
							"    pm.test('Response contains status and errors array', () => {",
							"        //pm.expect(response.status).to.eql(401);",
							"        pm.expect(response.errors).to.be.an('array');",
							"        pm.expect(response.errors[0]).to.be.an('object');",
							"    });",
							"",
							"    pm.test('Response contains error message: KEY_MISSING', () => {",
							"        pm.expect(response.errors).to.have.lengthOf(1);",
							"        pm.expect(response.errors[0].error).to.eql('KEY_MISSING');",
							"    });",
							"};",
							"",
							"const tokenMissingTests = () => {",
							"    const response = pm.response.json();",
							"",
							"    pm.test('Status code is 401', () => {",
							"        pm.response.to.have.status(401);",
							"    });",
							"",
							"    pm.test('Response contains status and errors array', () => {",
							"        //pm.expect(response.status).to.eql(401);",
							"        pm.expect(response.errors).to.be.an('array');",
							"        pm.expect(response.errors[0]).to.be.an('object');",
							"    });",
							"",
							"    pm.test('Response contains error message: TOKEN_INVALID and Bearer error=\"token_missing\"', () => {",
							"        pm.expect(response.errors).to.have.lengthOf(1);",
							"        pm.expect(response.errors[0].error).to.eql('TOKEN_INVALID');",
							"        pm.expect(pm.response.headers.get('WWW-Authenticate')).to.eql('Bearer error=\"token_missing\"');",
							"    });",
							"};",
							"",
							"const tokenInvalidTests = () => {",
							"    const response = pm.response.json();",
							"",
							"    pm.test('Status code is 401', () => {",
							"        pm.response.to.have.status(401);",
							"    });",
							"",
							"    pm.test('Response contains errors array', () => {",
							"        //pm.expect(response.status).to.eql(401);",
							"        pm.expect(response.errors).to.be.an('array');",
							"        pm.expect(response.errors[0]).to.be.an('object');",
							"    });",
							"",
							"    pm.test('Response contains error message: TOKEN_INVALID and Bearer error=\"invalid_token', () => {",
							"        pm.expect(response.errors).to.have.lengthOf(1);",
							"        pm.expect(response.errors[0].error).to.eql('TOKEN_INVALID');",
							"        pm.expect(pm.response.headers.get('WWW-Authenticate')).to.eql('Bearer error=\"invalid_token\"');",
							"    });",
							"};",
							"",
							"const tokenInvalidAudienceTests = () => {",
							"    const response = pm.response.json();",
							"",
							"    pm.test('Status code is 401', () => {",
							"        pm.response.to.have.status(401);",
							"    });",
							"",
							"    pm.test('Response contains errors array', () => {",
							"        pm.expect(response.errors).to.be.an('array');",
							"        pm.expect(response.errors[0]).to.be.an('object');",
							"    });",
							"",
							"    pm.test('Response contains error message: TOKEN_INVALID and Audience error=\"invalid_audience\"', () => {",
							"        pm.expect(response.errors).to.have.lengthOf(1);",
							"        pm.expect(response.errors[0].error).to.eql('TOKEN_INVALID');",
							"        pm.expect(pm.response.headers.get('WWW-Authenticate')).to.eql('Audience error=\"invalid_audience\"');",
							"    });",
							"};",
							"",
							"pm.collectionVariables.set('keyMissingTests', keyMissingTests.toString());",
							"pm.collectionVariables.set('tokenMissingTests', tokenMissingTests.toString());",
							"pm.collectionVariables.set('tokenInvalidTests', tokenInvalidTests.toString());",
							"pm.collectionVariables.set('tokenInvalidAudienceTests', tokenInvalidAudienceTests.toString());",
							"pm.collectionVariables.set('invalidToken', '3/7nz8H096eb8Gf014OD85brFae1OpIBoGnMbDmwGhO8PYAzTtaoiN864QCnbRbxXm');",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "card-limits",
			"item": [
				{
					"name": "GET /my/cards/{id}/card-limits",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "card-limits",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const getCards = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getCards, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const cardsObj = jsonData.cards[0];   //určení volané karty dle pořadí\r",
													"            pm.variables.set('cardsObj', cardsObj);\r",
													"            pm.variables.set('id', cardsObj.id);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{miroslavKupcikToken}}' }); \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.limits).to.be.an('array');\r",
													"    pm.expect(response.limits[0].limitType).to.eql('POS');\r",
													"    pm.expect(response.limits[0].limitPeriod).to.eql('1D');\r",
													"    pm.expect(response.limits[0].limit.currency).to.eql('CZK');\r",
													"    pm.expect(response.limits[0].bankLimit.precision).to.eql(2)\r",
													"    pm.expect(response.limits[1].limitType).to.eql('ATM');\r",
													"    pm.expect(response.limits[1].limitPeriod).to.eql('1D')\r",
													"    pm.expect(response.limits[2].limitType).to.eql('INTERNET')\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"card-limits"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg')      \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardsObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardsObj', cardsObj);\r",
															"        // pm.variables.set('id', cardsObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg')    \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardObj', cardObj);\r",
															"        // pm.variables.set('id', cardObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg')    \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardObj', cardObj);\r",
															"        // pm.variables.set('id', cardObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "PUT /my/cards/{id}/card-limits",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "card-limits",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomLimit = Math.floor(Math.random() * 1000)*100;\r",
													"const getCards = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getCards, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const cardsObj = jsonData.cards[0];\r",
													"            pm.variables.set('id', cardsObj.id);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{miroslavKupcikToken}}' });\r",
													"pm.variables.set('randomLimitValue', randomLimit);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const randomLimitValue = pm.variables.get('randomLimitValue');\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.limits).to.be.an('array');\r",
													"    pm.expect(response.limits[0].limit.value).to.eql(randomLimitValue)\r",
													"    pm.expect(response.limits[0].limitType).to.eql('POS');\r",
													"    pm.expect(response.limits[0].limitPeriod).to.eql('1D');\r",
													"    pm.expect(response.limits[0].limit.currency).to.eql('CZK');\r",
													"    pm.expect(response.limits[0].bankLimit.precision).to.eql(2)\r",
													"    pm.expect(response.limits[1].limitType).to.eql('ATM');\r",
													"    pm.expect(response.limits[1].limitPeriod).to.eql('1D')\r",
													"    pm.expect(response.limits[2].limitType).to.eql('INTERNET')\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN')\r",
													"    pm.expect(response.signInfo.signId).not.to.be.empty;\r",
													"    pm.expect(response.signInfo.hash).not.to.be.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"limits\": [\r\n        {\r\n            \"limitType\": \"POS\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": {{randomLimitValue}},\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        },\r\n        {\r\n            \"limitType\": \"ATM\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": {{randomLimitValue}},\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        },\r\n        {\r\n            \"limitType\": \"INTERNET\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": {{randomLimitValue}},\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"card-limits"
											]
										}
									},
									"response": []
								},
								{
									"name": "one type limit",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomLimit = Math.floor(Math.random() * 1000)*100;\r",
													"const getCards = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getCards, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const cardsObj = jsonData.cards[0];\r",
													"            pm.variables.set('id', cardsObj.id);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{miroslavKupcikToken}}' });\r",
													"pm.variables.set('randomLimitValue', randomLimit);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const randomLimitValue = pm.variables.get('randomLimitValue');\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.limits).to.be.an('array');\r",
													"    pm.expect(response.limits[0].limit.value).to.eql(randomLimitValue)\r",
													"    pm.expect(response.limits[0].limitType).to.eql('ATM');\r",
													"    pm.expect(response.limits[0].limitPeriod).to.eql('1D');\r",
													"    pm.expect(response.limits[0].limit.currency).to.eql('CZK');\r",
													"    pm.expect(response.limits[0].bankLimit.precision).to.eql(2)\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN')\r",
													"    pm.expect(response.signInfo.signId).not.to.be.empty;\r",
													"    pm.expect(response.signInfo.hash).not.to.be.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"limits\": [\r\n        {\r\n            \"limitType\": \"ATM\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": {{randomLimitValue}},\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"card-limits"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg')      \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardsObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardsObj', cardsObj);\r",
															"        // pm.variables.set('id', cardsObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg')    \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardObj', cardObj);\r",
															"        // pm.variables.set('id', cardObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg')     \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardObj', cardObj);\r",
															"        // pm.variables.set('id', cardObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "over max limit",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const OverMaxLimit = 50000100\r",
													"pm.variables.set('OverMaxLimit', OverMaxLimit);\r",
													"const getCards = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getCards, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const cardsObj = jsonData.cards[0];\r",
													"            pm.variables.set('id', cardsObj.id);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{miroslavKupcikToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const randomLimitValue = pm.variables.get('randomLimitValue');\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response contains error scope', () => {\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0].error).to.eql('CZ-POS_VALUE_OVER_MAX_LIMIT')\r",
													"    pm.expect(response.errors[0].scope).to.eql('limits[0].limit');\r",
													"    pm.expect(response.transactionId).not.to.be.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"limits\": [\r\n        {\r\n            \"limitType\": \"POS\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": {{OverMaxLimit}},\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            },\r\n            \"bankLimit\": {\r\n                \"value\": 50000000,\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        },\r\n        {\r\n            \"limitType\": \"ATM\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": 5000000,\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            },\r\n            \"bankLimit\": {\r\n                \"value\": 10000000,\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        },\r\n        {\r\n            \"limitType\": \"INTERNET\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": 20000000,\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            },\r\n            \"bankLimit\": {\r\n                \"value\": 50000000,\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"card-limits"
											]
										}
									},
									"response": []
								},
								{
									"name": "field invalid - currency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomLimit = Math.floor(Math.random() * 1000)*100;\r",
													"const getCards = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getCards, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const cardsObj = jsonData.cards[0];\r",
													"            pm.variables.set('id', cardsObj.id);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{miroslavKupcikToken}}' });\r",
													"pm.variables.set('randomLimitValue', randomLimit);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const randomLimitValue = pm.variables.get('randomLimitValue');\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response contains error scope', () => {\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0].error).to.eql('FIELD_INVALID')\r",
													"    pm.expect(response.errors[0].scope).to.eql('limits[0].limit.currency');\r",
													"    pm.expect(response.transactionId).not.to.be.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"limits\": [\r\n        {\r\n            \"limitType\": \"POS\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": 50000000,\r\n                \"precision\": 2,\r\n                \"currency\": \"XXXXXXXXXXXXXXXX\"\r\n            }\r\n        },\r\n        {\r\n            \"limitType\": \"ATM\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": {{randomLimitValue}},\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        },\r\n        {\r\n            \"limitType\": \"INTERNET\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": {{randomLimitValue}},\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"card-limits"
											]
										}
									},
									"response": []
								},
								{
									"name": "field invalid - limit",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomLimit = Math.floor(Math.random() * 1000)*100;\r",
													"const getCards = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getCards, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const cardsObj = jsonData.cards[0];\r",
													"            pm.variables.set('id', cardsObj.id);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{miroslavKupcikToken}}' });\r",
													"pm.variables.set('randomLimitValue', randomLimit);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const randomLimitValue = pm.variables.get('randomLimitValue');\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response contains error scope', () => {\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0].error).to.eql('FIELD_INVALID')\r",
													"    pm.expect(response.errors[0].scope).to.eql('limits[0].limit');\r",
													"    pm.expect(response.errors[0][\"dev-message\"]).not.to.be.empty;\r",
													"    pm.expect(response.errors[0][\"dev-message\"]).include(\"xxxxxxxx\")\r",
													"    pm.expect(response.transactionId).not.to.be.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"limits\": [\r\n        {\r\n            \"limitType\": \"POS\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": xxxxxxxx,\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        },\r\n        {\r\n            \"limitType\": \"ATM\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": {{randomLimitValue}},\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        },\r\n        {\r\n            \"limitType\": \"INTERNET\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": {{randomLimitValue}},\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"card-limits"
											]
										}
									},
									"response": []
								},
								{
									"name": "different token (id not found)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomLimit = Math.floor(Math.random() * 1000)*100;\r",
													"const getCards = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getCards, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const cardsObj = jsonData.cards[0];\r",
													"            pm.variables.set('id', cardsObj.id);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{ivanaPetrovicovaToken}}' });     //jiný token\r",
													"pm.variables.set('randomLimitValue', randomLimit);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const randomLimitValue = pm.variables.get('randomLimitValue');\r",
													"\r",
													"pm.test('Status code is 404', () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Response contains error scope', () => {\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0].error).to.eql('ID_NOT_FOUND')\r",
													"    pm.expect(response.errors[0].scope).to.eql('{pathParams}.id');\r",
													"    pm.expect(response.transactionId).not.to.be.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"limits\": [\r\n        {\r\n            \"limitType\": \"POS\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": {{randomLimitValue}},\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        },\r\n        {\r\n            \"limitType\": \"ATM\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": {{randomLimitValue}},\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        },\r\n        {\r\n            \"limitType\": \"INTERNET\",\r\n            \"limitPeriod\": \"1D\",\r\n            \"limit\": {\r\n                \"value\": {{randomLimitValue}},\r\n                \"precision\": 2,\r\n                \"currency\": \"CZK\"\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"card-limits"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "POST /my/cards/{id}/card-limits/sign/{signId}",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "card-limits/sign/{signId}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomLimit = Math.floor(Math.random() * 1000)*100;\r",
													"const id = 'B87F829A6C350A94DF8CA5B5910F8DEE91319B58';\r",
													"const body = {\r",
													"    \"limits\": [\r",
													"        {\r",
													"            \"limitType\": \"POS\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": randomLimit,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        },\r",
													"        {\r",
													"            \"limitType\": \"ATM\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": randomLimit,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        },\r",
													"        {\r",
													"            \"limitType\": \"INTERNET\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": randomLimit,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        }\r",
													"    ]\r",
													"};\r",
													"\r",
													"const putCardLimits = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/card-limits`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    },\r",
													"        body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardLimits, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id)\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{miroslavKupcikToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).not.to.be.empty;\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"authorizationType\": \"TAC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"card-limits",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg')     \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardsObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardsObj', cardsObj);\r",
															"        // pm.variables.set('id', cardsObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits/sign/11441000000501",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits",
														"sign",
														"11441000000501"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg')    \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardObj', cardObj);\r",
															"        // pm.variables.set('id', cardObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits/sign/11441000000501",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits",
														"sign",
														"11441000000501"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg')       \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardObj', cardObj);\r",
															"        // pm.variables.set('id', cardObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits/sign/11441000000501",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits",
														"sign",
														"11441000000501"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "PUT /my/cards/{id}/card-limits/sign/{signId}",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "card-limits/sign/{signId}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomLimitValue = Math.floor(Math.random() * 1000)*100;\r",
													"const id = 'B87F829A6C350A94DF8CA5B5910F8DEE91319B58';\r",
													"const body = {\r",
													"    \"limits\": [\r",
													"        {\r",
													"            \"limitType\": \"POS\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": randomLimitValue,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        },\r",
													"        {\r",
													"            \"limitType\": \"ATM\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": randomLimitValue,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        },\r",
													"        {\r",
													"            \"limitType\": \"INTERNET\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": randomLimitValue,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        }\r",
													"    ]\r",
													"};\r",
													"\r",
													"const putCardLimits = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/card-limits`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardLimits, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"    const postCardLimitSign = {\r",
													"        url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/card-limits/sign/{{signId}}`),\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'content-type': 'application/json',\r",
													"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"            'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: {\r",
													"    \"authorizationType\": \"TAC\"\r",
													"}\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(postCardLimitSign, (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            try {\r",
													"              pm.expect(response.code).to.eql(200);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.variables.set('randomLimitValue', randomLimitValue)\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{miroslavKupcikToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const randomLimitValue = pm.variables.get('randomLimitValue');\r",
													"const getCardsIdCardLimits = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards/{{id}}/card-limits'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('DONE');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"});\r",
													"\r",
													"pm.test('Get /my/cards/{id}/card-limits contains new limits', () => {\r",
													"    pm.sendRequest(getCardsIdCardLimits, (error, response) => {\r",
													"        const ResGETCardLimits = response.json();\r",
													"        pm.expect(error).to.not.be.ok;\r",
													"        //TODO return after implementation of service\r",
													"        // pm.expect(response.code).to.equal(200);\r",
													"        // pm.expect(ResGETCardLimits.limits[0].limit.value).to.eql(pm.variables.get('randomLimitValue'));\r",
													"        // console.log(\"Žádost o schválení limitu na kartě na částku :\",randomLimitValue,\"CZK\");\r",
													"        // console.log(\"Schválený limit na kartě:\",ResGETCardLimits.limits[0].limit.value, ResGETCardLimits.limits[0].limit.currency);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"authorizationType\": \"TAC\",\r\n    \"oneTimePassword\": \"00000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"card-limits",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "one type limit",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomLimitValue = Math.floor(Math.random() * 1000)*100;\r",
													"const id = 'B87F829A6C350A94DF8CA5B5910F8DEE91319B58';\r",
													"const body = {\r",
													"    \"limits\": [\r",
													"        {\r",
													"            \"limitType\": \"POS\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": randomLimitValue,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        },\r",
													"        {\r",
													"            \"limitType\": \"ATM\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": randomLimitValue,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        },\r",
													"        {\r",
													"            \"limitType\": \"INTERNET\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": randomLimitValue,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        }\r",
													"    ]\r",
													"};\r",
													"\r",
													"const putCardLimits = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/card-limits`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardLimits, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"    const postCardLimitSign = {\r",
													"        url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/card-limits/sign/{{signId}}`),\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'content-type': 'application/json',\r",
													"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"            'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: {\r",
													"    \"authorizationType\": \"TAC\"\r",
													"}\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(postCardLimitSign, (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            try {\r",
													"              pm.expect(response.code).to.eql(200);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.variables.set('randomLimitValue', randomLimitValue)\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{miroslavKupcikToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const randomLimitValue = pm.variables.get('randomLimitValue');\r",
													"const getCardsIdCardLimits = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards/{{id}}/card-limits'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('DONE');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"});\r",
													"\r",
													"pm.test('Get /my/cards/{id}/card-limits contains new limits', () => {\r",
													"    pm.sendRequest(getCardsIdCardLimits, (error, response) => {\r",
													"        const ResGETCardLimits = response.json();\r",
													"        pm.expect(error).to.not.be.ok;\r",
													"        //TODO return after implementation of service\r",
													"        // pm.expect(response.code).to.equal(200);\r",
													"        // pm.expect(ResGETCardLimits.limits[0].limit.value).to.eql(pm.variables.get('randomLimitValue'));\r",
													"        // console.log(\"Žádost o schválení limitu na kartě na částku :\",randomLimitValue,\"CZK\");\r",
													"        // console.log(\"Schválený limit na kartě:\",ResGETCardLimits.limits[0].limit.value, ResGETCardLimits.limits[0].limit.currency);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"authorizationType\": \"TAC\",\r\n    \"oneTimePassword\": \"00000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"card-limits",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg') \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardsObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardsObj', cardsObj);\r",
															"        // pm.variables.set('id', cardsObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"authorizationType\": \"TAC\",\r\n    \"oneTimePassword\": \"00000000\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits/sign/11441000000501",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits",
														"sign",
														"11441000000501"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg')  \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardObj', cardObj);\r",
															"        // pm.variables.set('id', cardObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits/sign/11441000000501",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits",
														"sign",
														"11441000000501"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg')   \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardObj', cardObj);\r",
															"        // pm.variables.set('id', cardObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits/sign/11441000000501",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits",
														"sign",
														"11441000000501"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "GET /my/cards/{id}/card-limits/sign/{signId}",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "card-limits/sign/{signId}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomLimit = Math.floor(Math.random() * 100000);\r",
													"const id = 'B87F829A6C350A94DF8CA5B5910F8DEE91319B58';\r",
													"const body = {\r",
													"    \"limits\": [\r",
													"        {\r",
													"            \"limitType\": \"POS\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": randomLimit,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            },\r",
													"            \"bankLimit\": {\r",
													"                \"value\": 50000000,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        },\r",
													"        {\r",
													"            \"limitType\": \"ATM\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": 5000000,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            },\r",
													"            \"bankLimit\": {\r",
													"                \"value\": 10000000,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        },\r",
													"        {\r",
													"            \"limitType\": \"INTERNET\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": 20000000,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            },\r",
													"            \"bankLimit\": {\r",
													"                \"value\": 50000000,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        }\r",
													"    ]\r",
													"};\r",
													"\r",
													"const putCardLimits = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/card-limits`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    },\r",
													"        body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardLimits, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id)\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{miroslavKupcikToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"//const signId = signId;\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.scenarios).to.be.an('array');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get ('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"    pm.expect(response.scenarios).to.be.an('array');\r",
													"    pm.expect(response.scenarios[0]).to.include('TAC'); //pro hranaté závorky\r",
													"\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"card-limits",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg')  \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardsObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardsObj', cardsObj);\r",
															"        // pm.variables.set('id', cardsObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits/sign/11441000000508",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits",
														"sign",
														"11441000000508"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg')    \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardObj', cardObj);\r",
															"        // pm.variables.set('id', cardObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits/sign/11441000000508",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits",
														"sign",
														"11441000000508"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const getCards = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards'),\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer 3/uB5sMqibuAxMKJj3Rsyudy6UsjjhLcbOWuBQYy6ZAdjeHb4BJiknqlOnB8kVd8xg')    \r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(getCards, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        //TODO return after implementation of service\r",
															"        // const cardObj = jsonData.cards[0];\r",
															"        // pm.variables.set('cardObj', cardObj);\r",
															"        // pm.variables.set('id', cardObj.id);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits/sign/11441000000508",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"card-limits",
														"sign",
														"11441000000508"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Not found in DB",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomLimit = Math.floor(Math.random() * 100000);\r",
													"const id = 'B87F829A6C350A94DF8CA5B5910F8DEE91319B58';\r",
													"const body = {\r",
													"    \"limits\": [\r",
													"        {\r",
													"            \"limitType\": \"POS\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": randomLimit,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            },\r",
													"            \"bankLimit\": {\r",
													"                \"value\": 50000000,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        },\r",
													"        {\r",
													"            \"limitType\": \"ATM\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": 5000000,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            },\r",
													"            \"bankLimit\": {\r",
													"                \"value\": 10000000,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        },\r",
													"        {\r",
													"            \"limitType\": \"INTERNET\",\r",
													"            \"limitPeriod\": \"1D\",\r",
													"            \"limit\": {\r",
													"                \"value\": 20000000,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            },\r",
													"            \"bankLimit\": {\r",
													"                \"value\": 50000000,\r",
													"                \"precision\": 2,\r",
													"                \"currency\": \"CZK\"\r",
													"            }\r",
													"        }\r",
													"    ]\r",
													"};\r",
													"\r",
													"const putCardLimits = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/card-limits`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    },\r",
													"        body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardLimits, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id)\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{miroslavKupcikToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const randomLimitValue = pm.variables.get('randomLimitValue');\r",
													"\r",
													"pm.test('Status code is 404', () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Response contains error scope', () => {\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0].message).to.eql('Not found in DB')\r",
													"    pm.expect(response.errors[0].error).to.eql('ID_NOT_FOUND')\r",
													"    pm.expect(response.errors[0].scope).to.eql('{pathParams}.signId');\r",
													"    pm.expect(response.transactionId).not.to.be.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/card-limits/sign/11455000000000",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"card-limits",
												"sign",
												"11455000000000"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "delivery",
			"item": [
				{
					"name": "GET /my/cards/{id}/delivery",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "card delivery",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    //pm.expect(jsonData.TODO).to.eql(TODO);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/delivery",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"delivery"
											]
										}
									},
									"response": []
								},
								{
									"name": "card delivery Copy DF-48349",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'B87F829A6C350A94DF8CA5B5910F8DEE91319B58';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{miroslavKupcikToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    //pm.expect(jsonData.TODO).to.eql(TODO);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/delivery",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"delivery"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/delivery",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"delivery"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cardHolder\": \"PETR ŠPAČEK\",\r\n    \"plasticType\": \"506\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/design",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"design"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cardHolder\": \"PETR ŠPAČEK\",\r\n    \"plasticType\": \"506\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/design",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"design"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "PUT /my/cards/{id}/delivery",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "card delivery",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    //pm.expect(jsonData.TODO).to.eql(TODO);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cardDeliveryMode\": \"HOME\",\r\n            \"address\": {\r\n                \"zipCode\": \"18200\",\r\n                \"city\": \"Praha\",\r\n                \"country\": \"CZ\",\r\n                \"street\": \"Skalnická\",\r\n                \"streetNumber\": \"805/16\"\r\n            },\r\n    \"deliveryPhone\": \"+420608457421\",\r\n    \"confirmations\": [\r\n        {\r\n            \"email\": \"kebab@zdarma.com\",\r\n            \"language\": \"cs\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/delivery",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"delivery"
											]
										}
									},
									"response": []
								},
								{
									"name": "card delivery defekt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    //pm.expect(jsonData.TODO).to.eql(TODO);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cardDeliveryMode\": \"HOME\",\r\n    \"deliveryPhone\": \"+420608999999\",\r\n    \"address\": {\r\n        \"street\": \"RAMBOOUSKOVÁ 999/9\",\r\n        \"zipCode\": \"199 00\",\r\n        \"city\": \"PRAHAHAHA\",\r\n        \"country\": \"CZ\"\r\n    },\r\n    \"confirmations\": [\r\n        {\r\n            \"email\": \"999@zdarma.com\",\r\n            \"language\": \"cs\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/delivery",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"delivery"
											]
										}
									},
									"response": []
								},
								{
									"name": "card delivery Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'B87F829A6C350A94DF8CA5B5910F8DEE91319B58';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{miroslavKupcikToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    //pm.expect(jsonData.TODO).to.eql(TODO);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cardDeliveryMode\": \"HOME\",\r\n    \"deliveryPhone\": \"+420608457421\",\r\n    \"address\": {\r\n        \"street\": \"ŠTĚTÍNSKÁ 366/20\",\r\n        \"zipCode\": \"181 00\",\r\n        \"city\": \"PRAHA\",\r\n        \"country\": \"CZ\"\r\n    },\r\n    \"confirmations\": [\r\n        {\r\n            \"email\": \"kebab@zdarma.com\",\r\n            \"language\": \"cs\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/delivery",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"delivery"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cardDeliveryMode\": \"HOME\",\r\n    \"address\": {\r\n        \"street\": \"za rohem\",\r\n        \"streetNumber\": \"32\",\r\n        \"buildingApartment\": \"1292\",\r\n        \"zipCode\": \"25601\",\r\n        \"city\": \"Ulambátar\",\r\n        \"country\": \"CZ\"\r\n    },\r\n    \"deliveryPhone\": \"+420608457421\",\r\n    \"confirmations\": [\r\n        {\r\n            \"email\": \"kebab@zdarma.com\",\r\n            \"language\": \"cs\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/delivery",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"delivery"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cardDeliveryMode\": \"HOME\",\r\n    \"address\": {\r\n        \"street\": \"za rohem\",\r\n        \"streetNumber\": \"32\",\r\n        \"buildingApartment\": \"1292\",\r\n        \"zipCode\": \"25601\",\r\n        \"city\": \"Ulambátar\",\r\n        \"country\": \"CZ\"\r\n    },\r\n    \"deliveryPhone\": \"+420608457421\",\r\n    \"confirmations\": [\r\n        {\r\n            \"email\": \"kebab@zdarma.com\",\r\n            \"language\": \"cs\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/delivery",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"delivery"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cardDeliveryMode\": \"HOME\",\r\n    \"address\": {\r\n        \"street\": \"za rohem\",\r\n        \"streetNumber\": \"32\",\r\n        \"buildingApartment\": \"1292\",\r\n        \"zipCode\": \"25601\",\r\n        \"city\": \"Ulambátar\",\r\n        \"country\": \"CZ\"\r\n    },\r\n    \"deliveryPhone\": \"+420608457421\",\r\n    \"confirmations\": [\r\n        {\r\n            \"email\": \"kebab@zdarma.com\",\r\n            \"language\": \"cs\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/delivery",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"delivery"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "POST /my/cards/{id}/delivery/sign/{signId}",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "card delivery",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"    'cardDeliveryMode': 'HOME',\r",
													"    'address': {\r",
													"        'street': 'za rohem',\r",
													"        'streetNumber': '32',\r",
													"        'buildingApartment': '1292',\r",
													"        'zipCode': '25601',\r",
													"        'city': 'Ulambátar',\r",
													"        'country': 'CZ'\r",
													"    },\r",
													"    'deliveryPhone': '+420608457421',\r",
													"    'confirmations': [\r",
													"        {\r",
													"            'email': 'kebab@zdarma.com',\r",
													"            'language': 'cs'\r",
													"        }\r",
													"    ]\r",
													"}\r",
													"\r",
													"const putCardsIdDelivery = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/delivery`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdDelivery, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"authorizationType\": \"TAC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/delivery/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"delivery",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PUT /my/cards/{id}/delivery/sign/{signId}",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "card delivery",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"    'cardDeliveryMode': 'HOME',\r",
													"    'address': {\r",
													"        'street': 'za rohem',\r",
													"        'streetNumber': '32',\r",
													"        'buildingApartment': '1292',\r",
													"        'zipCode': '25601',\r",
													"        'city': 'Ulambátar',\r",
													"        'country': 'CZ'\r",
													"    },\r",
													"    'deliveryPhone': '+420608457422',\r",
													"    'confirmations': [\r",
													"        {\r",
													"            'email': 'kebab@zdarma1.com',\r",
													"            'language': 'cs'\r",
													"        }\r",
													"    ]\r",
													"}\r",
													"\r",
													"const putCardsIdDelivery = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/delivery`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdDelivery, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"    const postCardsIdDeliverySign = {\r",
													"        url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/delivery/sign/{{signId}}`),\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'content-type': 'application/json',\r",
													"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: {\r",
													"                'authorizationType': 'TAC'\r",
													"            }\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(postCardsIdDeliverySign, (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            try {\r",
													"                pm.expect(response.code).to.eql(200);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('DONE');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"authorizationType\": \"TAC\",\r\n    \"oneTimePassword\": \"00000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/delivery/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"delivery",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "card delivery Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '2B448A7568028598D318D6CA5E9CD615C58E0BCB';\r",
													"const body = {\r",
													"    \"cardDeliveryMode\": \"HOME\",\r",
													"    \"deliveryPhone\": \"+420608457421\",\r",
													"    \"address\": {\r",
													"        \"street\": \"ŠTĚTÍNSKÁ 366/20\",\r",
													"        \"zipCode\": \"181 00\",\r",
													"        \"city\": \"PRAHA\",\r",
													"        \"country\": \"CZ\"\r",
													"    },\r",
													"    \"confirmations\": [\r",
													"        {\r",
													"            \"email\": \"kebab@zdarma.com\",\r",
													"            \"language\": \"cs\"\r",
													"        }\r",
													"    ]\r",
													"}\r",
													"\r",
													"const putCardsIdDelivery = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/delivery`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdDelivery, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"    const postCardsIdDeliverySign = {\r",
													"        url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/delivery/sign/{{signId}}`),\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'content-type': 'application/json',\r",
													"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"            'Authorization': pm.variables.replaceIn('Bearer {{miroslavKupcikToken}}')\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: {\r",
													"                'authorizationType': 'TAC'\r",
													"            }\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(postCardsIdDeliverySign, (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            try {\r",
													"                pm.expect(response.code).to.eql(200);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{miroslavKupcikToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('DONE');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"authorizationType\": \"TAC\",\r\n    \"oneTimePassword\": \"00000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/delivery/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"delivery",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "GET /my/cards/{id}/delivery/sign/{signId}",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "card delivery",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"    'cardDeliveryMode': 'HOME',\r",
													"    'address': {\r",
													"        'street': 'za rohem',\r",
													"        'streetNumber': '32',\r",
													"        'buildingApartment': '1292',\r",
													"        'zipCode': '25601',\r",
													"        'city': 'Ulambátar',\r",
													"        'country': 'CZ'\r",
													"    },\r",
													"    'deliveryPhone': '+420608457421',\r",
													"    'confirmations': [\r",
													"        {\r",
													"            'email': 'kebab@zdarma.com',\r",
													"            'language': 'cs'\r",
													"        }\r",
													"    ]\r",
													"}\r",
													"\r",
													"const putCardsIdDelivery = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/delivery`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdDelivery, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"    pm.expect(response.scenarios).to.be.an('array');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/delivery/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"delivery",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "secured-info",
			"item": [
				{
					"name": "POST /my/products/secured-info",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "secured-info",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.id).to.be.a('string');\r",
													"    pm.expect(response.securedInfoTypes).to.includes('3D_SECURE_CODE');\r",
													"    pm.expect(response.product).to.be.an('object');\r",
													"    pm.expect(response.product.type).to.eql('CARDS');\r",
													"    pm.expect(response.product.id).to.eql(pm.variables.get('id'));\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.be.a('string');\r",
													"    pm.expect(response.signInfo.hash).to.be.a('string');\r",
													"    pm.expect(response.id).to.eql(response.signInfo.signId);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": {\r\n        \"id\": \"{{id}}\",\r\n        \"type\": \"CARDS\"\r\n    },\r\n    \"securedInfoTypes\": [\r\n        \"3D_SECURE_CODE\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/products/secured-info",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"products",
												"secured-info"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"pm.variables.set('id', id);pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"product\": {\r\n        \"id\": \"{{id}}\",\r\n        \"type\": \"CARDS\"\r\n    },\r\n    \"securedInfoTypes\": [\r\n        \"3D_SECURE_CODE\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"product\": {\r\n        \"id\": \"{{id}}\",\r\n        \"type\": \"CARDS\"\r\n    },\r\n    \"securedInfoTypes\": [\r\n        \"3D_SECURE_CODE\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"product\": {\r\n        \"id\": \"{{id}}\",\r\n        \"type\": \"CARDS\"\r\n    },\r\n    \"securedInfoTypes\": [\r\n        \"3D_SECURE_CODE\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "POST /my/products/secured-info/sign/{signId}",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "secured-info",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
													"const body = {\r",
													"    'product': {\r",
													"        'id': `${id}`,\r",
													"        'type': 'CARDS'\r",
													"    },\r",
													"    'securedInfoTypes': [\r",
													"        '3D_SECURE_CODE'\r",
													"    ]\r",
													"}\r",
													"const postProductSecuredInfo = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"authorizationType\": \"TAC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/products/secured-info/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"products",
												"secured-info",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"const body = {\r",
															"    'product': {\r",
															"        'id': `${id}`,\r",
															"        'type': 'CARDS'\r",
															"    },\r",
															"    'securedInfoTypes': [\r",
															"        '3D_SECURE_CODE'\r",
															"    ]\r",
															"}\r",
															"const postProductSecuredInfo = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
															"    method: 'POST',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"authorizationType\": \"TAC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"const body = {\r",
															"    'product': {\r",
															"        'id': `${id}`,\r",
															"        'type': 'CARDS'\r",
															"    },\r",
															"    'securedInfoTypes': [\r",
															"        '3D_SECURE_CODE'\r",
															"    ]\r",
															"}\r",
															"const postProductSecuredInfo = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
															"    method: 'POST',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"authorizationType\": \"TAC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"const body = {\r",
															"    'product': {\r",
															"        'id': `${id}`,\r",
															"        'type': 'CARDS'\r",
															"    },\r",
															"    'securedInfoTypes': [\r",
															"        '3D_SECURE_CODE'\r",
															"    ]\r",
															"}\r",
															"const postProductSecuredInfo = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
															"    method: 'POST',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"authorizationType\": \"TAC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "invalid signId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response contains uuid and errors array', () => {\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: FIELD_INVALID', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('FIELD_INVALID');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"authorizationType\": \"TAC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/products/secured-info/sign/invalidSignId",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"products",
												"secured-info",
												"sign",
												"invalidSignId"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PUT /my/products/secured-info/sign/{signId}",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "secured-info",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
													"const body = {\r",
													"    'product': {\r",
													"        'id': `${id}`,\r",
													"        'type': 'CARDS'\r",
													"    },\r",
													"    'securedInfoTypes': [\r",
													"        '3D_SECURE_CODE'\r",
													"    ]\r",
													"}\r",
													"const postProductSecuredInfo = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"const postProductSecuredInfoSign = {\r",
													"        url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info/sign/{{signId}}'),\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'content-type': 'application/json',\r",
													"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: {\r",
													"                'authorizationType': 'TAC'\r",
													"            }\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(postProductSecuredInfoSign, (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            try {\r",
													"              pm.expect(response.code).to.eql(200);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('DONE');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"authorizationType\": \"TAC\",\r\n    \"oneTimePassword\": \"00000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/products/secured-info/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"products",
												"secured-info",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"const body = {\r",
															"    'product': {\r",
															"        'id': `${id}`,\r",
															"        'type': 'CARDS'\r",
															"    },\r",
															"    'securedInfoTypes': [\r",
															"        '3D_SECURE_CODE'\r",
															"    ]\r",
															"}\r",
															"const postProductSecuredInfo = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
															"    method: 'POST',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    };\r",
															"const postProductSecuredInfoSign = {\r",
															"        url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info/sign/{{signId}}'),\r",
															"        method: 'POST',\r",
															"        header: {\r",
															"            'content-type': 'application/json',\r",
															"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"        },\r",
															"        body: {\r",
															"            mode: 'raw',\r",
															"            raw: {\r",
															"                'authorizationType': 'TAC'\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"    pm.sendRequest(postProductSecuredInfoSign, (error, response) => {\r",
															"        if (error) {\r",
															"            console.log(error);\r",
															"        } else {\r",
															"            try {\r",
															"              pm.expect(response.code).to.eql(200);\r",
															"            } catch (err) {\r",
															"                console.log(err);\r",
															"            }\r",
															"        }\r",
															"    });\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"authorizationType\": \"TAC\",\r\n    \"oneTimePassword\": \"00000000\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"const body = {\r",
															"    'product': {\r",
															"        'id': `${id}`,\r",
															"        'type': 'CARDS'\r",
															"    },\r",
															"    'securedInfoTypes': [\r",
															"        '3D_SECURE_CODE'\r",
															"    ]\r",
															"}\r",
															"const postProductSecuredInfo = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
															"    method: 'POST',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    };\r",
															"const postProductSecuredInfoSign = {\r",
															"        url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info/sign/{{signId}}'),\r",
															"        method: 'POST',\r",
															"        header: {\r",
															"            'content-type': 'application/json',\r",
															"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"        },\r",
															"        body: {\r",
															"            mode: 'raw',\r",
															"            raw: {\r",
															"                'authorizationType': 'TAC'\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"    pm.sendRequest(postProductSecuredInfoSign, (error, response) => {\r",
															"        if (error) {\r",
															"            console.log(error);\r",
															"        } else {\r",
															"            try {\r",
															"              pm.expect(response.code).to.eql(200);\r",
															"            } catch (err) {\r",
															"                console.log(err);\r",
															"            }\r",
															"        }\r",
															"    });\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"authorizationType\": \"TAC\",\r\n    \"oneTimePassword\": \"00000000\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"const body = {\r",
															"    'product': {\r",
															"        'id': `${id}`,\r",
															"        'type': 'CARDS'\r",
															"    },\r",
															"    'securedInfoTypes': [\r",
															"        '3D_SECURE_CODE'\r",
															"    ]\r",
															"}\r",
															"const postProductSecuredInfo = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
															"    method: 'POST',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    };\r",
															"const postProductSecuredInfoSign = {\r",
															"        url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info/sign/{{signId}}'),\r",
															"        method: 'POST',\r",
															"        header: {\r",
															"            'content-type': 'application/json',\r",
															"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"        },\r",
															"        body: {\r",
															"            mode: 'raw',\r",
															"            raw: {\r",
															"                'authorizationType': 'TAC'\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"    pm.sendRequest(postProductSecuredInfoSign, (error, response) => {\r",
															"        if (error) {\r",
															"            console.log(error);\r",
															"        } else {\r",
															"            try {\r",
															"              pm.expect(response.code).to.eql(200);\r",
															"            } catch (err) {\r",
															"                console.log(err);\r",
															"            }\r",
															"        }\r",
															"    });\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"authorizationType\": \"TAC\",\r\n    \"oneTimePassword\": \"00000000\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "invalid signId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response contains uuid and errors array', () => {\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: FIELD_INVALID', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('FIELD_INVALID');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"authorizationType\": \"TAC\",\r\n    \"oneTimePassword\": \"00000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/products/secured-info/sign/invalidSignId",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"products",
												"secured-info",
												"sign",
												"invalidSignId"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "GET /my/products/secured-info/sign/{signId}",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "secured-info",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"    'product': {\r",
													"        'id': `${id}`,\r",
													"        'type': 'CARDS'\r",
													"    },\r",
													"    'securedInfoTypes': [\r",
													"        '3D_SECURE_CODE'\r",
													"    ]\r",
													"}\r",
													"const postProductSecuredInfo = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"    pm.expect(response.scenarios).to.be.an('array');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/products/secured-info/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"products",
												"secured-info",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"const body = {\r",
															"    'product': {\r",
															"        'id': `${id}`,\r",
															"        'type': 'CARDS'\r",
															"    },\r",
															"    'securedInfoTypes': [\r",
															"        '3D_SECURE_CODE'\r",
															"    ]\r",
															"}\r",
															"const postProductSecuredInfo = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
															"    method: 'POST',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"const body = {\r",
															"    'product': {\r",
															"        'id': `${id}`,\r",
															"        'type': 'CARDS'\r",
															"    },\r",
															"    'securedInfoTypes': [\r",
															"        '3D_SECURE_CODE'\r",
															"    ]\r",
															"}\r",
															"const postProductSecuredInfo = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
															"    method: 'POST',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"const body = {\r",
															"    'product': {\r",
															"        'id': `${id}`,\r",
															"        'type': 'CARDS'\r",
															"    },\r",
															"    'securedInfoTypes': [\r",
															"        '3D_SECURE_CODE'\r",
															"    ]\r",
															"}\r",
															"const postProductSecuredInfo = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
															"    method: 'POST',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "invalid signId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response contains uuid and errors array', () => {\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: FIELD_INVALID', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('FIELD_INVALID');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/products/secured-info/sign/invalidSignId",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"products",
												"secured-info",
												"sign",
												"invalidSignId"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "GET /my/products/secured-info/{requestId}",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "secured-info",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
													"const body = {\r",
													"    'product': {\r",
													"        'id': `${id}`,\r",
													"        'type': 'CARDS'\r",
													"    },\r",
													"    'securedInfoTypes': [\r",
													"        '3D_SECURE_CODE'\r",
													"    ]\r",
													"}\r",
													"const postProductSecuredInfo = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"            pm.variables.set('requestId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"    const postProductSecuredInfoSign = {\r",
													"        url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info/sign/{{signId}}'),\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'content-type': 'application/json',\r",
													"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: {\r",
													"                'authorizationType': 'TAC'\r",
													"            }\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(postProductSecuredInfoSign, (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            try {\r",
													"                pm.expect(response.code).to.eql(200);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        };\r",
													"        const putProductSecuredInfoSign = {\r",
													"            url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info/sign/{{signId}}'),\r",
													"            method: 'PUT',\r",
													"            header: {\r",
													"                'content-type': 'application/json',\r",
													"                'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"                'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: {\r",
													"                    \"authorizationType\": \"TAC\",\r",
													"                    \"oneTimePassword\": \"00000000\"\r",
													"                }\r",
													"            }\r",
													"        };\r",
													"        pm.sendRequest(putProductSecuredInfoSign, (error, response) => {\r",
													"            if (error) {\r",
													"                console.log(error);\r",
													"            } else {\r",
													"                try {\r",
													"                    pm.expect(response.code).to.eql(200);\r",
													"                } catch (err) {\r",
													"                    console.log(err);\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.id).to.eql(pm.variables.get('requestId'));\r",
													"    pm.expect(response.product).to.be.an('object');\r",
													"    pm.expect(response.product.type).to.eql('CARDS');\r",
													"    pm.expect(response.product.id).to.eql(pm.variables.get('id'));\r",
													"    pm.expect(response.securedInfo).to.be.an('array');\r",
													"    pm.expect(response.securedInfo[0].securedInfoType).to.eql('3D_SECURE_CODE');\r",
													"    pm.expect(response.securedInfo[0].displayInterval).to.eql(20);\r",
													"    pm.expect(response.securedInfo[0].decryptionKey).to.be.an('object');\r",
													"    pm.expect(response.securedInfo[0].decryptionKey.key).to.be.a('string');\r",
													"    pm.expect(response.securedInfo[0].decryptionKey.encryptedData).to.be.an('object');\r",
													"    pm.expect(response.securedInfo[0].decryptionKey.encryptedData.algorithm).to.be.a('string');\r",
													"    pm.expect(response.securedInfo[0].decryptionKey.encryptedData.initializationVector).to.be.a('string');\r",
													"    pm.expect(response.securedInfo[0].decryptionKey.encryptedData.cipherText).to.be.a('string');\r",
													"    pm.expect(response.securedInfo[0].encryptedData).to.be.an('object');\r",
													"    pm.expect(response.securedInfo[0].encryptedData.algorithm).to.be.a('string');\r",
													"    pm.expect(response.securedInfo[0].encryptedData.initializationVector).to.be.a('string');\r",
													"    pm.expect(response.securedInfo[0].encryptedData.cipherText).to.be.a('string');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/products/secured-info/{{requestId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"products",
												"secured-info",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"const body = {\r",
															"    'product': {\r",
															"        'id': `${id}`,\r",
															"        'type': 'CARDS'\r",
															"    },\r",
															"    'securedInfoTypes': [\r",
															"        '3D_SECURE_CODE'\r",
															"    ]\r",
															"}\r",
															"const postProductSecuredInfo = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
															"    method: 'POST',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"            pm.variables.set('requestId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    };\r",
															"    const postProductSecuredInfoSign = {\r",
															"        url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info/sign/{{signId}}'),\r",
															"        method: 'POST',\r",
															"        header: {\r",
															"            'content-type': 'application/json',\r",
															"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"        },\r",
															"        body: {\r",
															"            mode: 'raw',\r",
															"            raw: {\r",
															"                'authorizationType': 'TAC'\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"    pm.sendRequest(postProductSecuredInfoSign, (error, response) => {\r",
															"        if (error) {\r",
															"            console.log(error);\r",
															"        } else {\r",
															"            try {\r",
															"                pm.expect(response.code).to.eql(200);\r",
															"            } catch (err) {\r",
															"                console.log(err);\r",
															"            }\r",
															"        };\r",
															"        const putProductSecuredInfoSign = {\r",
															"            url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info/sign/{{signId}}'),\r",
															"            method: 'PUT',\r",
															"            header: {\r",
															"                'content-type': 'application/json',\r",
															"                'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"                'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"            },\r",
															"            body: {\r",
															"                mode: 'raw',\r",
															"                raw: {\r",
															"                    \"authorizationType\": \"TAC\",\r",
															"                    \"oneTimePassword\": \"00000000\"\r",
															"                }\r",
															"            }\r",
															"        };\r",
															"        pm.sendRequest(putProductSecuredInfoSign, (error, response) => {\r",
															"            if (error) {\r",
															"                console.log(error);\r",
															"            } else {\r",
															"                try {\r",
															"                    pm.expect(response.code).to.eql(200);\r",
															"                } catch (err) {\r",
															"                    console.log(err);\r",
															"                }\r",
															"            }\r",
															"        });\r",
															"    });\r",
															"});\r",
															"\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info/{{requestId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info",
														"{{requestId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"const body = {\r",
															"    'product': {\r",
															"        'id': `${id}`,\r",
															"        'type': 'CARDS'\r",
															"    },\r",
															"    'securedInfoTypes': [\r",
															"        '3D_SECURE_CODE'\r",
															"    ]\r",
															"}\r",
															"const postProductSecuredInfo = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
															"    method: 'POST',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"            pm.variables.set('requestId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    };\r",
															"    const postProductSecuredInfoSign = {\r",
															"        url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info/sign/{{signId}}'),\r",
															"        method: 'POST',\r",
															"        header: {\r",
															"            'content-type': 'application/json',\r",
															"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"        },\r",
															"        body: {\r",
															"            mode: 'raw',\r",
															"            raw: {\r",
															"                'authorizationType': 'TAC'\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"    pm.sendRequest(postProductSecuredInfoSign, (error, response) => {\r",
															"        if (error) {\r",
															"            console.log(error);\r",
															"        } else {\r",
															"            try {\r",
															"                pm.expect(response.code).to.eql(200);\r",
															"            } catch (err) {\r",
															"                console.log(err);\r",
															"            }\r",
															"        };\r",
															"        const putProductSecuredInfoSign = {\r",
															"            url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info/sign/{{signId}}'),\r",
															"            method: 'PUT',\r",
															"            header: {\r",
															"                'content-type': 'application/json',\r",
															"                'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"                'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"            },\r",
															"            body: {\r",
															"                mode: 'raw',\r",
															"                raw: {\r",
															"                    \"authorizationType\": \"TAC\",\r",
															"                    \"oneTimePassword\": \"00000000\"\r",
															"                }\r",
															"            }\r",
															"        };\r",
															"        pm.sendRequest(putProductSecuredInfoSign, (error, response) => {\r",
															"            if (error) {\r",
															"                console.log(error);\r",
															"            } else {\r",
															"                try {\r",
															"                    pm.expect(response.code).to.eql(200);\r",
															"                } catch (err) {\r",
															"                    console.log(err);\r",
															"                }\r",
															"            }\r",
															"        });\r",
															"    });\r",
															"});\r",
															"\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info/{{requestId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info",
														"{{requestId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
															"const body = {\r",
															"    'product': {\r",
															"        'id': `${id}`,\r",
															"        'type': 'CARDS'\r",
															"    },\r",
															"    'securedInfoTypes': [\r",
															"        '3D_SECURE_CODE'\r",
															"    ]\r",
															"}\r",
															"const postProductSecuredInfo = {\r",
															"    url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info'),\r",
															"    method: 'POST',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(postProductSecuredInfo, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"            pm.variables.set('requestId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    };\r",
															"    const postProductSecuredInfoSign = {\r",
															"        url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info/sign/{{signId}}'),\r",
															"        method: 'POST',\r",
															"        header: {\r",
															"            'content-type': 'application/json',\r",
															"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"        },\r",
															"        body: {\r",
															"            mode: 'raw',\r",
															"            raw: {\r",
															"                'authorizationType': 'TAC'\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"    pm.sendRequest(postProductSecuredInfoSign, (error, response) => {\r",
															"        if (error) {\r",
															"            console.log(error);\r",
															"        } else {\r",
															"            try {\r",
															"                pm.expect(response.code).to.eql(200);\r",
															"            } catch (err) {\r",
															"                console.log(err);\r",
															"            }\r",
															"        };\r",
															"        const putProductSecuredInfoSign = {\r",
															"            url: pm.variables.replaceIn('{{g4bUrl}}/my/products/secured-info/sign/{{signId}}'),\r",
															"            method: 'PUT',\r",
															"            header: {\r",
															"                'content-type': 'application/json',\r",
															"                'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"                'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"            },\r",
															"            body: {\r",
															"                mode: 'raw',\r",
															"                raw: {\r",
															"                    \"authorizationType\": \"TAC\",\r",
															"                    \"oneTimePassword\": \"00000000\"\r",
															"                }\r",
															"            }\r",
															"        };\r",
															"        pm.sendRequest(putProductSecuredInfoSign, (error, response) => {\r",
															"            if (error) {\r",
															"                console.log(error);\r",
															"            } else {\r",
															"                try {\r",
															"                    pm.expect(response.code).to.eql(200);\r",
															"                } catch (err) {\r",
															"                    console.log(err);\r",
															"                }\r",
															"            }\r",
															"        });\r",
															"    });\r",
															"});\r",
															"\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/products/secured-info/{{requestId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"products",
														"secured-info",
														"{{requestId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "invalid requestId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response contains uuid and errors array', () => {\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: FIELD_INVALID', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('FIELD_INVALID');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/products/secured-info/invalidRequestId",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"products",
												"secured-info",
												"invalidRequestId"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "states",
			"item": [
				{
					"name": "PUT /my/cards/{id}/states",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "reissue pin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.be.a('string');\r",
													"    pm.expect(response.signInfo.hash).to.be.a('string');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"action\":\"REISSUE_PIN\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace card",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.be.a('string');\r",
													"    pm.expect(response.signInfo.hash).to.be.a('string');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"action\":\"REPLACE_CARD\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states"
											]
										}
									},
									"response": []
								},
								{
									"name": "unlock",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"\t'action':'LOCK_CARD',\r",
													"    'lockReason':'LOSS'\r",
													"};\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"//lock card before tests\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        try {\r",
													"           pm.expect(response.code).to.be.oneOf([200, 400])\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.be.a('string');\r",
													"    pm.expect(response.signInfo.hash).to.be.a('string');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"action\":\"UNLOCK_CARD\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states"
											]
										}
									},
									"response": []
								},
								{
									"name": "lock",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"    'action': 'UNLOCK_CARD'\r",
													"};\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"//unlock card before tests\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        try {\r",
													"            const jsonData = response.json();\r",
													"            if (response.code === 200) {\r",
													"                const signId = jsonData.signInfo.signId;\r",
													"                pm.variables.set('signId', signId);\r",
													"                const postCardsIdStateSign = {\r",
													"                    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states/sign/{{signId}}`),\r",
													"                    method: 'POST',\r",
													"                    header: {\r",
													"                        'content-type': 'application/json',\r",
													"                        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"                        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"                    },\r",
													"                    body: {\r",
													"                        mode: 'raw',\r",
													"                        raw: {\r",
													"                            'authorizationType': 'TAC'\r",
													"                        }\r",
													"                    }\r",
													"                };\r",
													"                pm.sendRequest(postCardsIdStateSign, (error, response) => {\r",
													"                    if (error) {\r",
													"                        console.log(error);\r",
													"                    } else {\r",
													"                        try {\r",
													"                            pm.expect(response.code).to.eql(200);\r",
													"                        } catch (err) {\r",
													"                            console.log(err);\r",
													"                        }\r",
													"                    }\r",
													"                    const putCardsIdStateSign = {\r",
													"                        url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states/sign/{{signId}}`),\r",
													"                        method: 'PUT',\r",
													"                        header: {\r",
													"                            'content-type': 'application/json',\r",
													"                            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"                            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"                        },\r",
													"                        body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: {\r",
													"                                \"authorizationType\": \"TAC\",\r",
													"                                \"oneTimePassword\": \"00000000\"\r",
													"                            }\r",
													"                        }\r",
													"                    };\r",
													"                    pm.sendRequest(putCardsIdStateSign, (error, response) => {\r",
													"                        if (error) {\r",
													"                            console.log(error);\r",
													"                        } else {\r",
													"                            try {\r",
													"                                pm.expect(response.code).to.eql(200);\r",
													"                            } catch (err) {\r",
													"                                console.log(err);\r",
													"                            }\r",
													"                        }\r",
													"                    });\r",
													"                });\r",
													"            } else {\r",
													"                pm.expect(jsonData.errors[0].error).to.eql('CARD_UNBLOCK_NOT_POSSIBLE');\r",
													"            }\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const getCardsId = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards/{{id}}'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    const response = pm.response.json();\r",
													"\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('NONE');\r",
													"});\r",
													"\r",
													"pm.test('Get /my/cards/{id} contains new state', () => {\r",
													"    const response = pm.response.json();\r",
													"\r",
													"    pm.sendRequest(getCardsId, (error, response) => {\r",
													"        const jsonData = response.json();\r",
													"        pm.expect(error).to.not.be.ok;\r",
													"        //TODO return after implementation of service\r",
													"        //pm.expect(response.code).to.equal(200);\r",
													"        //pm.expect(jsonData.state).to.eql('TEMPORARY_BLOCKED');\r",
													"    })\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"action\":\"LOCK_CARD\",\r\n    \"lockReason\":\"LOSS\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states"
											]
										}
									},
									"response": []
								},
								{
									"name": "activate card",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '61506C7CDB2F64469AAEB3D97B362EDF12A3CB2D';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{jiriOubornyToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.be.a('string');\r",
													"    pm.expect(response.signInfo.hash).to.be.a('string');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"action\": \"ACTIVATE_CARD\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states"
											]
										}
									},
									"response": []
								},
								{
									"name": "set replacement on",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    const response = pm.response.json();\r",
													"\r",
													"\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.be.a('string');\r",
													"    pm.expect(response.signInfo.hash).to.be.a('string');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"action\":\"SET_AUTOMATIC_REPLACEMENT_ON\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states"
											]
										}
									},
									"response": []
								},
								{
									"name": "set replacement off",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    const response = pm.response.json();\r",
													"\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.be.a('string');\r",
													"    pm.expect(response.signInfo.hash).to.be.a('string');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"action\":\"SET_AUTOMATIC_REPLACEMENT_OFF\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"action\":\"REISSUE_PIN\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/states",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"states"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"action\":\"REISSUE_PIN\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/states",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"states"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"action\":\"REISSUE_PIN\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/states",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"states"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "invalid id path",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 404', () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Response contains uuid and errors array', () => {\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: ID_NOT_FOUND', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('ID_NOT_FOUND');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"action\":\"SET_AUTOMATIC_REPLACEMENT_OFF\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/E3483328CA739FE033BE654A21FD24DA9AB4BA12/states",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"E3483328CA739FE033BE654A21FD24DA9AB4BA12",
												"states"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid request body",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 404', () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Response contains uuid and errors array', () => {\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: FIELD_INVALID', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('FIELD_INVALID');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"action\":\"INVALID_BODY\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states"
											]
										}
									},
									"response": []
								},
								{
									"name": "unlock - card active",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"    'action': 'UNLOCK_CARD'\r",
													"};\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"//unlock card before tests\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        try {\r",
													"            const jsonData = response.json();\r",
													"            if (response.code === 200) {\r",
													"                const signId = jsonData.signInfo.signId;\r",
													"                pm.variables.set('signId', signId);\r",
													"                const postCardsIdStateSign = {\r",
													"                    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states/sign/{{signId}}`),\r",
													"                    method: 'POST',\r",
													"                    header: {\r",
													"                        'content-type': 'application/json',\r",
													"                        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"                        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"                    },\r",
													"                    body: {\r",
													"                        mode: 'raw',\r",
													"                        raw: {\r",
													"                            'authorizationType': 'TAC'\r",
													"                        }\r",
													"                    }\r",
													"                };\r",
													"                pm.sendRequest(postCardsIdStateSign, (error, response) => {\r",
													"                    if (error) {\r",
													"                        console.log(error);\r",
													"                    } else {\r",
													"                        try {\r",
													"                            pm.expect(response.code).to.eql(200);\r",
													"                        } catch (err) {\r",
													"                            console.log(err);\r",
													"                        }\r",
													"                    }\r",
													"                    const putCardsIdStateSign = {\r",
													"                        url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states/sign/{{signId}}`),\r",
													"                        method: 'PUT',\r",
													"                        header: {\r",
													"                            'content-type': 'application/json',\r",
													"                            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"                            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"                        },\r",
													"                        body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: {\r",
													"                                \"authorizationType\": \"TAC\",\r",
													"                                \"oneTimePassword\": \"00000000\"\r",
													"                            }\r",
													"                        }\r",
													"                    };\r",
													"                    pm.sendRequest(putCardsIdStateSign, (error, response) => {\r",
													"                        if (error) {\r",
													"                            console.log(error);\r",
													"                        } else {\r",
													"                            try {\r",
													"                                pm.expect(response.code).to.eql(200);\r",
													"                            } catch (err) {\r",
													"                                console.log(err);\r",
													"                            }\r",
													"                        }\r",
													"                    });\r",
													"                });\r",
													"            } else {\r",
													"                pm.expect(jsonData.errors[0].error).to.eql('CARD_UNBLOCK_NOT_POSSIBLE');\r",
													"            }\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: CARD_UNBLOCK_NOT_POSSIBLE', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('CARD_UNBLOCK_NOT_POSSIBLE');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"action\":\"UNLOCK_CARD\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states"
											]
										}
									},
									"response": []
								},
								{
									"name": "lock - card locked",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"\t'action':'LOCK_CARD',\r",
													"    'lockReason':'LOSS'\r",
													"};\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"//lock card before tests\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        try {\r",
													"           pm.expect(response.code).to.be.oneOf([200, 400])\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: CARD_LOCKED', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('CARD_LOCKED');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"action\":\"LOCK_CARD\",\r\n    \"lockReason\":\"LOSS\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "POST /my/cards/{id}/states/sign/{signId}",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "reissue pin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"    'action': 'REISSUE_PIN'\r",
													"};\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"authorizationType\": \"TAC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace card",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"\t'action':'REPLACE_CARD'\r",
													"};\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"authorizationType\": \"TAC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "unlock",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const unlockBody = {\r",
													"    'action': 'UNLOCK_CARD'\r",
													"};\r",
													"const lockBody = {\r",
													"    'action': 'LOCK_CARD',\r",
													"    'lockReason': 'LOSS'\r",
													"};\r",
													"const putCardsIdState = (body) => ({\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"pm.sendRequest(putCardsIdState(lockBody), (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        try {\r",
													"            pm.expect(response.code).to.be.oneOf([200, 400])\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(putCardsIdState(unlockBody), (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            const jsonData = response.json();\r",
													"            try {\r",
													"                const signId = jsonData.signInfo.signId;\r",
													"                pm.variables.set('signId', signId);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"authorizationType\": \"TAC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "activate card",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"    'action': 'ACTIVATE_CARD'\r",
													"}\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"authorizationType\": \"TAC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "set replacement on",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"\t'action':'SET_AUTOMATIC_REPLACEMENT_ON'\r",
													"};\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"authorizationType\": \"TAC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "set replacement off",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"\t'action':'SET_AUTOMATIC_REPLACEMENT_OFF'\r",
													"};\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"authorizationType\": \"TAC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"const body = {\r",
															"    'action': 'REISSUE_PIN'\r",
															"}\r",
															"const putCardsIdState = {\r",
															"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
															"    method: 'PUT',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(putCardsIdState, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"authorizationType\": \"TAC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"states",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"const body = {\r",
															"    'action': 'REISSUE_PIN'\r",
															"}\r",
															"const putCardsIdState = {\r",
															"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
															"    method: 'PUT',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(putCardsIdState, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"authorizationType\": \"TAC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"states",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"const body = {\r",
															"    'action': 'REISSUE_PIN'\r",
															"}\r",
															"const putCardsIdState = {\r",
															"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
															"    method: 'PUT',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(putCardsIdState, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"authorizationType\": \"TAC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"states",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "invalid signId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const unlockBody = {\r",
													"    'action': 'UNLOCK_CARD'\r",
													"};\r",
													"const lockBody = {\r",
													"    'action': 'LOCK_CARD',\r",
													"    'lockReason': 'LOSS'\r",
													"};\r",
													"const putCardsIdState = (body) => ({\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"pm.sendRequest(putCardsIdState(lockBody), (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        try {\r",
													"            pm.expect(response.code).to.be.oneOf([200, 400])\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(putCardsIdState(unlockBody), (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            const jsonData = response.json();\r",
													"            try {\r",
													"                const signId = jsonData.signInfo.signId;\r",
													"                pm.variables.set('signId', signId);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response contains uuid and errors array', () => {\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: FIELD_INVALID', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('FIELD_INVALID');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"authorizationType\": \"TAC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/invalidSignId",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"invalidSignId"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PUT /my/cards/{id}/states/sign/{signId}",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "reissue pin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"    'action': 'REISSUE_PIN'\r",
													"};\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"    const postCardsIdStateSign = {\r",
													"        url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states/sign/{{signId}}`),\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'content-type': 'application/json',\r",
													"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: {\r",
													"                'authorizationType': 'TAC'\r",
													"            }\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(postCardsIdStateSign, (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            try {\r",
													"              pm.expect(response.code).to.eql(200);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const getCardsId = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards/{{id}}'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('DONE');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"});\r",
													"\r",
													"pm.test('Get /my/cards/{id} contains new state', () => {\r",
													"    pm.sendRequest(getCardsId, (error, response) => {\r",
													"        const jsonData = response.json();\r",
													"        pm.expect(error).to.not.be.ok;\r",
													"        //TODO return after implementation of service\r",
													"        //pm.expect(response.code).to.equal(200);\r",
													"        //pm.expect(jsonData.TODO).to.eql(TODO);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"authorizationType\": \"TAC\",\r\n  \"oneTimePassword\": \"00000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace card",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"\t'action':'REPLACE_CARD'\r",
													"};\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"    const postCardsIdStateSign = {\r",
													"        url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states/sign/{{signId}}`),\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'content-type': 'application/json',\r",
													"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: {\r",
													"                'authorizationType': 'TAC'\r",
													"            }\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(postCardsIdStateSign, (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            try {\r",
													"              pm.expect(response.code).to.eql(200);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const getCardsId = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards/{{id}}'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('DONE');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"});\r",
													"\r",
													"pm.test('Get /my/cards/{id} contains new state', () => {\r",
													"    pm.sendRequest(getCardsId, (error, response) => {\r",
													"        const jsonData = response.json();\r",
													"        pm.expect(error).to.not.be.ok;\r",
													"        //TODO return after implementation of service\r",
													"        //pm.expect(response.code).to.equal(200);\r",
													"        //pm.expect(jsonData.TODO).to.eql(TODO);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"authorizationType\": \"TAC\",\r\n  \"oneTimePassword\": \"00000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "unlock",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const unlockBody = {\r",
													"    'action': 'UNLOCK_CARD'\r",
													"};\r",
													"const lockBody = {\r",
													"    'action': 'LOCK_CARD',\r",
													"    'lockReason': 'LOSS'\r",
													"};\r",
													"const putCardsIdState = (body) => ({\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"pm.sendRequest(putCardsIdState(lockBody), (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        try {\r",
													"            pm.expect(response.code).to.be.oneOf([200, 400])\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(putCardsIdState(unlockBody), (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            const jsonData = response.json();\r",
													"            try {\r",
													"                const signId = jsonData.signInfo.signId;\r",
													"                pm.variables.set('signId', signId);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        };\r",
													"        const postCardsIdStateSign = {\r",
													"            url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states/sign/{{signId}}`),\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'content-type': 'application/json',\r",
													"                'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"                'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: {\r",
													"                    'authorizationType': 'TAC'\r",
													"                }\r",
													"            }\r",
													"        };\r",
													"        pm.sendRequest(postCardsIdStateSign, (error, response) => {\r",
													"            if (error) {\r",
													"                console.log(error);\r",
													"            } else {\r",
													"                try {\r",
													"                    pm.expect(response.code).to.eql(200);\r",
													"                } catch (err) {\r",
													"                    console.log(err);\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const getCardsId = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards/{{id}}'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('DONE');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"});\r",
													"\r",
													"pm.test('Get /my/cards/{id} contains new state', () => {\r",
													"    pm.sendRequest(getCardsId, (error, response) => {\r",
													"        const jsonData = response.json();\r",
													"        pm.expect(error).to.not.be.ok;\r",
													"        //TODO return after implementation of service\r",
													"        //pm.expect(response.code).to.equal(200);\r",
													"        //pm.expect(jsonData.state).to.eql('ACTIVE');\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"authorizationType\": \"TAC\",\r\n  \"oneTimePassword\": \"00000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "activate card",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '61506C7CDB2F64469AAEB3D97B362EDF12A3CB2D';\r",
													"const body = {\r",
													"    'action': 'ACTIVATE_CARD'\r",
													"};\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{jiriOubornyToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"    const postCardsIdStateSign = {\r",
													"        url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states/sign/{{signId}}`),\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'content-type': 'application/json',\r",
													"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"            'Authorization': pm.variables.replaceIn('Bearer {{jiriOubornyToken}}')\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: {\r",
													"                'authorizationType': 'TAC'\r",
													"            }\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(postCardsIdStateSign, (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            try {\r",
													"              pm.expect(response.code).to.eql(200);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{jiriOubornyToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const getCardsId = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards/{{id}}'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('DONE');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"});\r",
													"\r",
													"pm.test('Get /my/cards/{id} contains new state', () => {\r",
													"    pm.sendRequest(getCardsId, (error, response) => {\r",
													"        const jsonData = response.json();\r",
													"        pm.expect(error).to.not.be.ok;\r",
													"        //TODO return after implementation of service\r",
													"        //pm.expect(response.code).to.equal(200);\r",
													"        //pm.expect(jsonData.TODO).to.eql(TODO);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"authorizationType\": \"TAC\",\r\n  \"oneTimePassword\": \"00000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "set replacement on",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"\t'action':'SET_AUTOMATIC_REPLACEMENT_ON'\r",
													"};\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"    const postCardsIdStateSign = {\r",
													"        url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states/sign/{{signId}}`),\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'content-type': 'application/json',\r",
													"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: {\r",
													"                'authorizationType': 'TAC'\r",
													"            }\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(postCardsIdStateSign, (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            try {\r",
													"              pm.expect(response.code).to.eql(200);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const getCardsId = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards/{{id}}'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('DONE');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"});\r",
													"\r",
													"pm.test('Get /my/cards/{id} contains new state', () => {\r",
													"    pm.sendRequest(getCardsId, (error, response) => {\r",
													"        const jsonData = response.json();\r",
													"        pm.expect(error).to.not.be.ok;\r",
													"        //TODO return after implementation of service\r",
													"        //pm.expect(response.code).to.equal(200);\r",
													"        //pm.expect(jsonData.TODO).to.eql(TODO);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"authorizationType\": \"TAC\",\r\n  \"oneTimePassword\": \"00000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "set replacement off",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"\t'action':'SET_AUTOMATIC_REPLACEMENT_OFF'\r",
													"};\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"    const postCardsIdStateSign = {\r",
													"        url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states/sign/{{signId}}`),\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'content-type': 'application/json',\r",
													"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: {\r",
													"                'authorizationType': 'TAC'\r",
													"            }\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(postCardsIdStateSign, (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            try {\r",
													"              pm.expect(response.code).to.eql(200);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"const getCardsId = {\r",
													"    url: pm.variables.replaceIn('{{g4bUrl}}/my/cards/{{id}}'),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('DONE');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"});\r",
													"\r",
													"pm.test('Get /my/cards/{id} contains new state', () => {\r",
													"    pm.sendRequest(getCardsId, (error, response) => {\r",
													"        const jsonData = response.json();\r",
													"        pm.expect(error).to.not.be.ok;\r",
													"        //TODO return after implementation of service\r",
													"        //pm.expect(response.code).to.equal(200);\r",
													"        //pm.expect(jsonData.TODO).to.eql(TODO);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"authorizationType\": \"TAC\",\r\n  \"oneTimePassword\": \"00000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"const body = {\r",
															"    'action': 'REISSUE_PIN'\r",
															"};\r",
															"const putCardsIdState = {\r",
															"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
															"    method: 'PUT',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(putCardsIdState, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    };\r",
															"    const postCardsIdStateSign = {\r",
															"        url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states/sign/{{signId}}`),\r",
															"        method: 'POST',\r",
															"        header: {\r",
															"            'content-type': 'application/json',\r",
															"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"        },\r",
															"        body: {\r",
															"            mode: 'raw',\r",
															"            raw: {\r",
															"                'authorizationType': 'TAC'\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"    pm.sendRequest(postCardsIdStateSign, (error, response) => {\r",
															"        if (error) {\r",
															"            console.log(error);\r",
															"        } else {\r",
															"            try {\r",
															"              pm.expect(response.code).to.eql(200);\r",
															"            } catch (err) {\r",
															"                console.log(err);\r",
															"            }\r",
															"        }\r",
															"    });\r",
															"});\r",
															"\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"authorizationType\": \"TAC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"states",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"const body = {\r",
															"    'action': 'REISSUE_PIN'\r",
															"};\r",
															"const putCardsIdState = {\r",
															"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
															"    method: 'PUT',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(putCardsIdState, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    };\r",
															"    const postCardsIdStateSign = {\r",
															"        url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states/sign/{{signId}}`),\r",
															"        method: 'POST',\r",
															"        header: {\r",
															"            'content-type': 'application/json',\r",
															"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"        },\r",
															"        body: {\r",
															"            mode: 'raw',\r",
															"            raw: {\r",
															"                'authorizationType': 'TAC'\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"    pm.sendRequest(postCardsIdStateSign, (error, response) => {\r",
															"        if (error) {\r",
															"            console.log(error);\r",
															"        } else {\r",
															"            try {\r",
															"              pm.expect(response.code).to.eql(200);\r",
															"            } catch (err) {\r",
															"                console.log(err);\r",
															"            }\r",
															"        }\r",
															"    });\r",
															"});\r",
															"\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"authorizationType\": \"TAC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"states",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"const body = {\r",
															"    'action': 'REISSUE_PIN'\r",
															"};\r",
															"const putCardsIdState = {\r",
															"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
															"    method: 'PUT',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(putCardsIdState, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    };\r",
															"    const postCardsIdStateSign = {\r",
															"        url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states/sign/{{signId}}`),\r",
															"        method: 'POST',\r",
															"        header: {\r",
															"            'content-type': 'application/json',\r",
															"            'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"            'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"        },\r",
															"        body: {\r",
															"            mode: 'raw',\r",
															"            raw: {\r",
															"                'authorizationType': 'TAC'\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"    pm.sendRequest(postCardsIdStateSign, (error, response) => {\r",
															"        if (error) {\r",
															"            console.log(error);\r",
															"        } else {\r",
															"            try {\r",
															"              pm.expect(response.code).to.eql(200);\r",
															"            } catch (err) {\r",
															"                console.log(err);\r",
															"            }\r",
															"        }\r",
															"    });\r",
															"});\r",
															"\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"authorizationType\": \"TAC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"states",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "invalid signId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const unlockBody = {\r",
													"    'action': 'UNLOCK_CARD'\r",
													"};\r",
													"const lockBody = {\r",
													"    'action': 'LOCK_CARD',\r",
													"    'lockReason': 'LOSS'\r",
													"};\r",
													"const putCardsIdState = (body) => ({\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"pm.sendRequest(putCardsIdState(lockBody), (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        try {\r",
													"            pm.expect(response.code).to.be.oneOf([200, 400])\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(putCardsIdState(unlockBody), (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            const jsonData = response.json();\r",
													"            try {\r",
													"                const signId = jsonData.signInfo.signId;\r",
													"                pm.variables.set('signId', signId);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        };\r",
													"        const postCardsIdStateSign = {\r",
													"            url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states/sign/{{signId}}`),\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'content-type': 'application/json',\r",
													"                'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"                'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: {\r",
													"                    'authorizationType': 'TAC'\r",
													"                }\r",
													"            }\r",
													"        };\r",
													"        pm.sendRequest(postCardsIdStateSign, (error, response) => {\r",
													"            if (error) {\r",
													"                console.log(error);\r",
													"            } else {\r",
													"                try {\r",
													"                    pm.expect(response.code).to.eql(200);\r",
													"                } catch (err) {\r",
													"                    console.log(err);\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response contains uuid and errors array', () => {\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: FIELD_INVALID', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('FIELD_INVALID');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"authorizationType\": \"TAC\",\r\n  \"oneTimePassword\": \"00000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/invalidSignId",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"invalidSignId"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "GET /my/cards/{id}/states/sign/{signId}",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "reissue pin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"    'action': 'REISSUE_PIN'\r",
													"}\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"    pm.expect(response.scenarios).to.be.an('array');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace card",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"\t'action':'REPLACE_CARD'\r",
													"}\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"    pm.expect(response.scenarios).to.be.an('array');\r",
													"    pm.expect(response.scenarios[0]).to.have.member('TAC');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "unlock",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const unlockBody = {\r",
													"    'action': 'UNLOCK_CARD'\r",
													"};\r",
													"const lockBody = {\r",
													"    'action': 'LOCK_CARD',\r",
													"    'lockReason': 'LOSS'\r",
													"};\r",
													"const putCardsIdState = (body) => ({\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"pm.sendRequest(putCardsIdState(lockBody), (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        try {\r",
													"            pm.expect(response.code).to.be.oneOf([200, 400])\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(putCardsIdState(unlockBody), (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            const jsonData = response.json();\r",
													"            try {\r",
													"                const signId = jsonData.signInfo.signId;\r",
													"                pm.variables.set('signId', signId);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"    pm.expect(response.scenarios).to.be.an('array');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "activate card",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"    'action': 'ACTIVATE_CARD'\r",
													"}\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"    pm.expect(response.scenarios).to.be.an('array');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "set replacement on",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"\t'action':'SET_AUTOMATIC_REPLACEMENT_ON'\r",
													"}\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"    pm.expect(response.scenarios).to.be.an('array');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "set replacement off",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const body = {\r",
													"\t'action':'SET_AUTOMATIC_REPLACEMENT_OFF'\r",
													"}\r",
													"const putCardsIdState = {\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(putCardsIdState, (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        const jsonData = response.json();\r",
													"        try {\r",
													"            const signId = jsonData.signInfo.signId;\r",
													"            pm.variables.set('signId', signId);\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response contains correct values', () => {\r",
													"    pm.expect(response.signInfo).to.be.an('object');\r",
													"    pm.expect(response.signInfo.state).to.eql('OPEN');\r",
													"    pm.expect(response.signInfo.signId).to.eql(pm.variables.get('signId'));\r",
													"    pm.expect(response.authorizationType).to.eql('TAC');\r",
													"    pm.expect(response.scenarios).to.be.an('array');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"{{signId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "negative",
							"item": [
								{
									"name": "auth",
									"item": [
										{
											"name": "401 subscription key missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"const body = {\r",
															"    'action': 'REISSUE_PIN'\r",
															"}\r",
															"const putCardsIdState = {\r",
															"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
															"    method: 'PUT',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(putCardsIdState, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
															"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"states",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"const body = {\r",
															"    'action': 'REISSUE_PIN'\r",
															"}\r",
															"const putCardsIdState = {\r",
															"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
															"    method: 'PUT',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(putCardsIdState, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"states",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 token invalid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
															"const body = {\r",
															"    'action': 'REISSUE_PIN'\r",
															"}\r",
															"const putCardsIdState = {\r",
															"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
															"    method: 'PUT',\r",
															"    header: {\r",
															"        'content-type': 'application/json',\r",
															"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
															"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
															"    },\r",
															"    body: {\r",
															"        mode: 'raw',\r",
															"        raw: body\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.sendRequest(putCardsIdState, (error, response) => {\r",
															"    if (error) {\r",
															"        console.log(error);\r",
															"    } else {\r",
															"        const jsonData = response.json();\r",
															"        try {\r",
															"            const signId = jsonData.signInfo.signId;\r",
															"            pm.variables.set('signId', signId);\r",
															"        } catch (err) {\r",
															"            console.log(err);\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.variables.set('id', id);\r",
															"pm.request.headers.remove('Authorization');\r",
															"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/{{signId}}",
													"host": [
														"{{g4bUrl}}"
													],
													"path": [
														"my",
														"cards",
														"{{id}}",
														"states",
														"sign",
														"{{signId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "invalid signId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = 'E3483328CA739FE033BE654A21FD24DA9AB4BA11';\r",
													"const unlockBody = {\r",
													"    'action': 'UNLOCK_CARD'\r",
													"};\r",
													"const lockBody = {\r",
													"    'action': 'LOCK_CARD',\r",
													"    'lockReason': 'LOSS'\r",
													"};\r",
													"const putCardsIdState = (body) => ({\r",
													"    url: pm.variables.replaceIn(`{{g4bUrl}}/my/cards/${id}/states`),\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'content-type': 'application/json',\r",
													"        'Ocp-Apim-Subscription-Key': pm.variables.replaceIn('{{OcpApimKey}}'),\r",
													"        'Authorization': pm.variables.replaceIn('Bearer {{petrSpacekToken}}')\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: body\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"pm.sendRequest(putCardsIdState(lockBody), (error, response) => {\r",
													"    if (error) {\r",
													"        console.log(error);\r",
													"    } else {\r",
													"        try {\r",
													"            pm.expect(response.code).to.be.oneOf([200, 400])\r",
													"        } catch (err) {\r",
													"            console.log(err);\r",
													"        }\r",
													"    };\r",
													"    pm.sendRequest(putCardsIdState(unlockBody), (error, response) => {\r",
													"        if (error) {\r",
													"            console.log(error);\r",
													"        } else {\r",
													"            const jsonData = response.json();\r",
													"            try {\r",
													"                const signId = jsonData.signInfo.signId;\r",
													"                pm.variables.set('signId', signId);\r",
													"            } catch (err) {\r",
													"                console.log(err);\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response contains uuid and errors array', () => {\r",
													"    pm.expect(response.errors).to.be.an('array');\r",
													"    pm.expect(response.errors[0]).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Response contains error message: FIELD_INVALID', () => {\r",
													"    pm.expect(response.errors).to.have.lengthOf(1);\r",
													"    pm.expect(response.errors[0].error).to.eql('FIELD_INVALID');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/states/sign/invalidSignId",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"states",
												"sign",
												"invalidSignId"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "GET /my/cards/{id}/secure-online-shopping",
			"item": [
				{
					"name": "positive",
					"item": [
						{
							"name": "secure-online-shopping",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
											"pm.variables.set('id', id);\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    //pm.expect(jsonData.TODO).to.eql(TODO);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/cards/{{id}}/secure-online-shopping",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"cards",
										"{{id}}",
										"secure-online-shopping"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "negative",
					"item": [
						{
							"name": "auth",
							"item": [
								{
									"name": "401 subscription key missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/secure-online-shopping",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"secure-online-shopping"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/secure-online-shopping",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"secure-online-shopping"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token invalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/secure-online-shopping",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"secure-online-shopping"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "GET /my/cards/{id}/design",
			"item": [
				{
					"name": "positive",
					"item": [
						{
							"name": "card design",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
											"pm.variables.set('id', id);\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    pm.expect(response.cardHolder).to.eql('PETR ŠPAČEK');\r",
											"    pm.expect(response.plasticType).to.eql('506');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{g4bUrl}}/my/cards/{{id}}/design",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"cards",
										"{{id}}",
										"design"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "negative",
					"item": [
						{
							"name": "auth",
							"item": [
								{
									"name": "401 subscription key missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/design",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"design"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/design",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"design"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token invalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/design",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"design"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "PUT /my/cards/{id}/replacement-card/design",
			"item": [
				{
					"name": "positive",
					"item": [
						{
							"name": "replacement-card design",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
											"pm.variables.set('id', id);\r",
											"pm.request.headers.remove('Authorization');\r",
											"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response contains correct values', () => {\r",
											"    //pm.expect(jsonData.TODO).to.eql(TODO);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cardHolder\": \"PETR ŠPAČEK\",\r\n    \"plasticType\": \"506\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{g4bUrl}}/my/cards/{{id}}/replacement-card/design",
									"host": [
										"{{g4bUrl}}"
									],
									"path": [
										"my",
										"cards",
										"{{id}}",
										"replacement-card",
										"design"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "negative",
					"item": [
						{
							"name": "auth",
							"item": [
								{
									"name": "401 subscription key missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{petrSpacekToken}}' });\r",
													"pm.request.headers.remove('Ocp-Apim-Subscription-Key');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('keyMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cardHolder\": \"PETR ŠPAČEK\",\r\n    \"plasticType\": \"506\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/replacement-card/design",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"replacement-card",
												"design"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenMissingTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cardHolder\": \"PETR ŠPAČEK\",\r\n    \"plasticType\": \"506\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/replacement-card/design",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"replacement-card",
												"design"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 token invalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const id = '9017A95F2A2FB2CBEC160B432C6EC44B94229B22';\r",
													"pm.variables.set('id', id);\r",
													"pm.request.headers.remove('Authorization');\r",
													"pm.request.headers.add({ key: 'Authorization', value: '{{invalidToken}}' });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.collectionVariables.get('tokenInvalidTests'))();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cardHolder\": \"PETR ŠPAČEK\",\r\n    \"plasticType\": \"506\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{g4bUrl}}/my/cards/{{id}}/replacement-card/design",
											"host": [
												"{{g4bUrl}}"
											],
											"path": [
												"my",
												"cards",
												"{{id}}",
												"replacement-card",
												"design"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add({ key: 'Authorization', value: 'Bearer {{lenkaHajkovaToken}}' });",
					"pm.request.headers.add({ key: 'Ocp-Apim-Subscription-Key', value: '{{OcpApimKey}}' });",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test('Response must be valid and have body', ()=> {",
					"    pm.expect(pm.response.to.be.withBody);",
					"});",
					"",
					"pm.test('Header contains Content-Type application/json', ()=> {",
					"    pm.expect(pm.response).to.have.header('Content-type');",
					"    pm.expect(pm.response.headers.get('content-Type')).to.contain('application/json');",
					"});",
					"",
					"pm.test('Response time is less than 6000ms', ()=> {",
					"    pm.expect(pm.response.responseTime).to.be.below(6000);",
					"});",
					""
				]
			}
		}
	]
}